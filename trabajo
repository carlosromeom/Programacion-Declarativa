(require (lib "graphics.ss" "graphics"))
(require racket/vector)

(define (menuPrincipal)
  (open-graphics)
  (define ventana1 (open-viewport "Introducir Valores iniciales" 750 200))

  ( (draw-string ventana1) (make-posn 100 30 ) "Introduzca el numero de elementos a ordenar o cargue un fichero de datos." )

  ( (draw-rectangle ventana1)  (make-posn 100 100) 130 30 "red")

  ( (draw-string ventana1)  (make-posn 103 121) "Cargar fichero")

;se comprueba donde hacemos click
  (define click (get-mouse-click ventana1))

  (if (and (and (> (posn-x (mouse-click-posn click)) 100) (< (posn-x (mouse-click-posn click)) 230))
           (and (> (posn-y (mouse-click-posn click)) 100) (< (posn-y (mouse-click-posn click)) 130)))
      (display "prueba") ;LLAMO A LA FUNCION CARGAR FICHERO
      )
      
(close-graphics)
  )


;sin usar aun
(define (maximo-vector v)
  (do
      (
       (n           (-(vector-length v) 1))
       (i            1                        (+ i 1))
       (maximo(vector-ref v 0)  (if(< maximo(vector-ref v i)) (vector-ref v i)maximo))
       )
    ;; Condiciónde salida
    ((> i n) maximo)
    ;; No hay cuerpo del bucle
    )
  )


(define (mostrarVector vector )
  ;paso el vector a valor absoluto
  (define vector2 vector)
  (open-graphics)
  (define ventana1 (open-viewport "Valores del vector" (+ (* (vector-length vector) 10) 100) 800 ) )

  ;dibujo los rectangulos
  (do
      (;valores del bucle
       (i 0 (+ i 1))
       (posicionenPantalla 50 (+ posicionenPantalla 15))
       )
    ;condición y sentencia de salida
    ( (= i (vector-length vector2)) )

    ;cuerpo del bucle
    ( (draw-solid-rectangle ventana1) (make-posn posicionenPantalla (- 750(* 10 (vector-ref vector2 i))) ) 9 (abs(* 10 (vector-ref vector2 i))) "blue")
    ( (draw-string ventana1) (make-posn posicionenPantalla 770 ) (number->string(vector-ref vector2 i )  )     )
    )

  ;(close-graphics)
  )
;(mostrarVector #(1 -2 3))


(define (mensaje m)
  (open-graphics)
  (define ventana1 (open-viewport "Mensaje" 800 180))
  ( (draw-string ventana1) (make-posn 100 30 ) m )
  ;Ahora espera hasta que el usuario hace click
  ( (draw-rectangle ventana1)  (make-posn 50 120) 100 90 "red")
  ( (draw-string ventana1)  (make-posn 50 135) "OK")

  (define click (get-mouse-click ventana1))

  (if (and (and (> (posn-x (mouse-click-posn click)) 50) (< (posn-x (mouse-click-posn click)) 100))
           (and (> (posn-y (mouse-click-posn click)) 90) (< (posn-y (mouse-click-posn click)) 120)))
      (display "Siguiente") 
      )
  
  (close-graphics)
  
 )

    
  
;ALGORITMOS DE ORDENACION

;1 MERGE SORT
(define (aux lista listaIzquierda listaDerecha i)
  (open-graphics)
  (define ventana1 (open-viewport "Split de los valores" (+ (* (length lista) 10) 500) 800 ) )
  ;muestro los valores de las listas
  
  ;LISTA IZQUIERDA
  (define (auxIzquierda listaIzquierda ventana1)
    (do
        (;valores del bucle
         (i 0 (+ i 1))
         (posicionenPantalla 50 (+ posicionenPantalla 10))
         )
      ;condición y sentencia de salida
      ( (= i (vector-length (list->vector listaIzquierda)    )) posicionenPantalla )

      ;cuerpo del bucle
      ( (draw-solid-rectangle ventana1) (make-posn posicionenPantalla (- 750(* 10 (vector-ref (list->vector listaIzquierda) i))) ) 9 (* 10 (vector-ref (list->vector listaIzquierda) i)) "blue")
      ( (draw-string ventana1) (make-posn posicionenPantalla 770 ) (number->string(vector-ref (list->vector listaIzquierda) i )  )     )
      )
    )

  (define posicionUltima (auxIzquierda listaIzquierda ventana1))


  ;LISTA DERECHA
    (do
        (;valores del bucle
         (i 0 (+ i 1))
         (posicionenPantalla (+ posicionUltima 100) (+ posicionenPantalla 10))
         )
      ;condición y sentencia de salida
      ( (= i (vector-length (list->vector listaDerecha)    )) posicionenPantalla )

      ;cuerpo del bucle
      ( (draw-solid-rectangle ventana1) (make-posn posicionenPantalla (- 750(* 10 (vector-ref (list->vector listaDerecha) i))) ) 9 (* 10 (vector-ref (list->vector listaDerecha) i)) "blue")
      ( (draw-string ventana1) (make-posn posicionenPantalla 770 ) (number->string(vector-ref (list->vector listaDerecha) i )  )     )
      )
    

  ;Ahora espera hasta que el usuario hace click
  ( (draw-rectangle ventana1)  (make-posn 35 770) 130 30 "red")
  ( (draw-string ventana1)  (make-posn 35 785) "Continuar")

  (define click (get-mouse-click ventana1))

  (if (and (and (> (posn-x (mouse-click-posn click)) 35) (< (posn-x (mouse-click-posn click)) 130))
           (and (> (posn-y (mouse-click-posn click)) 770) (< (posn-y (mouse-click-posn click)) 785)))
      (display "Siguiente") 
      )

  
  
  (if (= i (length lista))
      (append (list listaIzquierda) (list listaDerecha))
      (if (even? i)
          (aux lista (append listaIzquierda (list (list-ref lista i)) ) listaDerecha (+ i 1))
          (aux lista listaIzquierda (append listaDerecha (list (list-ref lista i)) ) (+ i 1))
          )
      )
  ;(close-graphics)
  )

(define (split lista)
  (if (= (length lista) 0)
      '( () () )
      (if (= (length lista) 1)
          (list lista '()  )
          (aux lista '() '() 0)
          )
      )
  )
;(split '(5 4 1 3 2))



(define (merge lista1 lista2)
  (if (and (= (length lista1) 0) (= (length lista2) 0))
      '() 
      (if (and (= (length lista1) 0) (>= (length lista2) 1))
          (sort ( append '() lista2 )<) 
            (if (and (>= (length lista1) 1) (= (length lista2) 0))
               (sort (append lista1 '() )<)
                (sort(append lista1 lista2)<)
                )
            )
      )
  )

;(merge '( 1 9 3) '(4 5 6))


(define (mergeSort lista)
  ;primero se le hace un split
  (define listaDividida (split lista) )

  (mensaje "Ahora se unen ambos vectores")
  
  ;ahora se hace un merge
  (define a (merge (car listaDividida) (car (cdr listaDividida))))
  (mostrarVector (list->vector a))
  a
 
)

;(mergeSort  '(5 4 9 3 2))





;2 BURBUJA
(define (modificarVector vector2 i)
  ;Muestro los candidatos a ordenar
  (open-graphics)
  (define ventana1 (open-viewport "Candidatos a ordenarse" (+ (* (vector-length vector2) 10) 100) 800 ) )

  ;dibujo los rectangulos
  (do
      (;valores del bucle
       (u 0 (+ u 1))
       (posicionenPantalla 50 (+ posicionenPantalla 15))
       )
    ;condición y sentencia de salida
    ( (= u (vector-length vector2)) )

    ;cuerpo del bucle
    (if (= u i) 
        (and
         ( (draw-solid-rectangle ventana1) (make-posn posicionenPantalla (- 750(* 10 (vector-ref vector2 u))) ) 9 (abs(* 10 (vector-ref vector2 u))) "red")
         ( (draw-string ventana1) (make-posn posicionenPantalla 770 ) (number->string(vector-ref vector2 u )  )     )
         )
        (if (= u (+ i 1)) 
            (and
             ( (draw-solid-rectangle ventana1) (make-posn posicionenPantalla (- 750(* 10 (vector-ref vector2 u))) ) 9 (abs(* 10 (vector-ref vector2 u))) "red")
             ( (draw-string ventana1) (make-posn posicionenPantalla 770 ) (number->string(vector-ref vector2 u )  )     )
             )
            (and
        
    ( (draw-solid-rectangle ventana1) (make-posn posicionenPantalla (- 750(* 10 (vector-ref vector2 u))) ) 9 (abs(* 10 (vector-ref vector2 u))) "blue")
    ( (draw-string ventana1) (make-posn posicionenPantalla 770 ) (number->string(vector-ref vector2 u )  )     )
    )
    )
        )
    )
  
  (mensaje "Continuar...?")







  
  (define aux 0)
  (if (not (= i (- (vector-length vector2) 1)))
  (cond
    (
     (and (> (vector-ref vector2 i) (vector-ref vector2 (+ i 1))))
     
     (set! aux (vector-ref vector2 i))
     (vector-set! vector2 i (vector-ref vector2 (+ i 1)) )
     (vector-set! vector2 (+ i 1) aux )
     )
      
     )
  )
;se muestra el movimiento hecho en el vector

  (open-graphics)
  (define ventana2 (open-viewport "Resultado de la ordenacion" (+ (* (vector-length vector2) 10) 100) 800 ) )

  ;dibujo los rectangulos
  (do
      (;valores del bucle
       (u 0 (+ u 1))
       (posicionenPantalla 50 (+ posicionenPantalla 15))
       )
    ;condición y sentencia de salida
    ( (= u (vector-length vector2)) )

    ;cuerpo del bucle
    (if (= u i) 
        (and
         ( (draw-solid-rectangle ventana2) (make-posn posicionenPantalla (- 750(* 10 (vector-ref vector2 u))) ) 9 (abs(* 10 (vector-ref vector2 u))) "red")
         ( (draw-string ventana2) (make-posn posicionenPantalla 770 ) (number->string(vector-ref vector2 u )  )     )
         )
        (if (= u (+ i 1)) 
            (and
             ( (draw-solid-rectangle ventana2) (make-posn posicionenPantalla (- 750(* 10 (vector-ref vector2 u))) ) 9 (abs(* 10 (vector-ref vector2 u))) "red")
             ( (draw-string ventana2) (make-posn posicionenPantalla 770 ) (number->string(vector-ref vector2 u )  )     )
             )
            (and
        
    ( (draw-solid-rectangle ventana2) (make-posn posicionenPantalla (- 750(* 10 (vector-ref vector2 u))) ) 9 (abs(* 10 (vector-ref vector2 u))) "blue")
    ( (draw-string ventana2) (make-posn posicionenPantalla 770 ) (number->string(vector-ref vector2 u )  )     )
    )
    )
        )
    )
  
  (mensaje "Continuar...?")
  
  









  
  vector2
  )

;(modificarVector (vector 4 2 3) 0)



;MERGE SORT PARA USO INTERNO
(define (aux2 lista listaIzquierda listaDerecha i)
  (if (= i (length lista))
      (append (list listaIzquierda) (list listaDerecha))
      (if (even? i)
          (aux2 lista (append listaIzquierda (list (list-ref lista i)) ) listaDerecha (+ i 1))
          (aux2 lista listaIzquierda (append listaDerecha (list (list-ref lista i)) ) (+ i 1))
          )
      )
  )

(define (split2 lista)
  (if (= (length lista) 0)
      '( () () )
      (if (= (length lista) 1)
          (list lista '()  )
          (aux2 lista '() '() 0)
          )
      )
  )
;(split '(5 4 1 3 2))



(define (merge2 lista1 lista2)
  (if (and (= (length lista1) 0) (= (length lista2) 0))
      '()
      (if (and (= (length lista1) 0) (>= (length lista2) 1))
          (sort ( append '() lista2 )<) 
            (if (and (>= (length lista1) 1) (= (length lista2) 0))
               (sort (append lista1 '() )<)
                (sort(append lista1 lista2)<)
                )
            )
      )
  )

;(merge '( 1 9 3) '(4 5 6))

(define (mergeSort2 lista)
  ;primero se le hace un split
  (define listaDividida (split2 lista) )

  ;ahora se hace un merge
  (merge2 (car listaDividida) (car (cdr listaDividida))) 
)






(define (burbuja vector)
  (if (equal? vector (list->vector (mergeSort2 (vector->list vector))))
      vector
      
      )

  (mensaje "Se muestra el vector antes de ordenar por burbuja")
  (mostrarVector vector)
  (mensaje "Continuar...?")


  
    (do
         (;definicion de variables
          (i 0 (+ i 1))
          (vector2 vector (modificarVector vector2 i) )
          )
          ;condicion y sentencia de salida
          ( ( = i (vector-length vector)) vector)
          )
       
       
    
  

  )
;(burbuja (vector 4 2 3))



;3 ORDENAMIENTO POR INSERCION
(define (buscarPosicion vector2 n i)
  (if (= (vector-length vector2) 0)
      0
      (if (< n (vector-ref vector2 i)) 
          i
          (buscarPosicion vector2 n (+ i 1))
          )
      )
  )
;(buscarPosicion #(1 2 4 0) 3 0)

(define (insertar i vector2 n)
  (define aux (vector-copy vector2 i (vector-length vector2)))
  (if (= i 0)
      (vector-append (vector n) vector2)
      (if (= i (- (vector-length vector2)))
          (vector-append vector2 (vector n) )
          (vector-append (vector-append (vector-copy vector2 0 i) (vector n)) aux)
          )
      )
  )
;(insertar (buscarPosicion #(1 2 4 0) 3 0) #(1 2 4 0) 3)
;(insertar 0 #(1 2 4 3) 0)
;(insertar (vector-length #(1 2 4 3))   #(1 2 4 3) 5)
        

(define (ordenarVector vector vector2 u)

;Muestro los candidatos a ordenar
  (open-graphics)
  (define ventana1 (open-viewport "Candidatos a ordenarse" (+ (* (vector-length vector) 10) 100) 800 ) )

  ;dibujo los rectangulos
  (do
      (;valores del bucle
       (o 0 (+ o 1))
       (posicionenPantalla 50 (+ posicionenPantalla 15))
       )
    ;condición y sentencia de salida
    ( (= o (vector-length vector)) )

    ;cuerpo del bucle
    (if (= o u) 
        (and
         ( (draw-solid-rectangle ventana1) (make-posn posicionenPantalla (- 750(* 10 (vector-ref vector o))) ) 9 (abs(* 10 (vector-ref vector o))) "red")
         ( (draw-string ventana1) (make-posn posicionenPantalla 770 ) (number->string(vector-ref vector o )  )     )
         )
        (if (= o (+ u 1)) 
            (and
             ( (draw-solid-rectangle ventana1) (make-posn posicionenPantalla (- 750(* 10 (vector-ref vector o))) ) 9 (abs(* 10 (vector-ref vector o))) "red")
             ( (draw-string ventana1) (make-posn posicionenPantalla 770 ) (number->string(vector-ref vector o )  )     )
             )
            (and
        
    ( (draw-solid-rectangle ventana1) (make-posn posicionenPantalla (- 750(* 10 (vector-ref vector o))) ) 9 (abs(* 10 (vector-ref vector o))) "blue")
    ( (draw-string ventana1) (make-posn posicionenPantalla 770 ) (number->string(vector-ref vector o )  )     )
    )
    )
        )
    )
  
  (mensaje "Continuar...?")
  
  ;(if (< (vector-ref vector (+ u 1)) (vector-ref vector u))
  (if (= u (- (vector-length vector) 1))
     ; (insertar (buscarPosicion vector2 (vector-ref vector (+ u 1)) 0 ) vector2 (vector-ref vector (+ u 1)))
      (and
       (mostrarVector (insertar (buscarPosicion vector2 (vector-ref vector u) 0) vector2 (vector-ref vector u)))
       (mensaje "Continuar...?")
       (insertar (buscarPosicion vector2 (vector-ref vector u) 0) vector2 (vector-ref vector u))
       )
      (and
       (mostrarVector (insertar (buscarPosicion vector2 (vector-ref vector u) 0 ) vector2 (vector-ref vector u )))
       (mensaje "Continuar...?")
       (insertar (buscarPosicion vector2 (vector-ref vector u) 0 ) vector2 (vector-ref vector u ))
       )
      )
  )



(define (insertionSort vector)
  (mensaje "Se muestra el vector antes de ordenar por insercion")
  (mostrarVector vector)
  (mensaje "Continuar...?")


  
  (do
      (;definicion de variables
       (i 0 (+ i 1))
       (vector2 #() (ordenarVector vector vector2 i))
       )
    ;condicion y sentencia de salida
    ( (= i (vector-length vector))  vector2)
    )
  )

;(insertionSort #(5 1 0 4))
;(insertionSort #(5 1 0 4 -1))


;4 QUICK SORT

(define (quickSort vector)


  
  (define (aux pivote vectorIzquierda vectorDerecha vector2 vectorFinal)
    ;(display pivote)
   ; (if (and (= (vector-length vectorIzquierda) 0) (= (vector-length vectorDerecha) 0))
    ;    vectorFinal
     ;   )
    (if (= (vector-length vector2) 0)
        vectorFinal
        )
    
    (open-graphics)
    (define ventana1 (open-viewport "Split de los valores" (+ (* (vector-length vector2) 10) 500) 800 ) )
    ;muestro los valores de las listas
  
    ;LISTA IZQUIERDA
    (define (auxIzquierda vectorIzquierda ventana1)
      (do
          (;valores del bucle
           (i 0 (+ i 1))
           (posicionenPantalla 50 (+ posicionenPantalla 10))
           )
        ;condición y sentencia de salida
        ( (= i (vector-length vectorIzquierda    )) posicionenPantalla )

        ;cuerpo del bucle
        ( (draw-solid-rectangle ventana1) (make-posn posicionenPantalla (- 750(* 10 (vector-ref vectorIzquierda i))) ) 9 (* 10 (vector-ref vectorIzquierda i)) "blue")
        ( (draw-string ventana1) (make-posn posicionenPantalla 770 ) (number->string(vector-ref vectorIzquierda i )  )     )
        )
      )
    (define posicionUltima (auxIzquierda vectorIzquierda ventana1))
    
      ;dibujo el pivote
      ( (draw-solid-rectangle ventana1) (make-posn (+ posicionUltima 50) (- 750(* 10 pivote)) ) 9 (* 10 pivote) "red")
      ( (draw-string ventana1) (make-posn (+ posicionUltima 50) 770 ) (number->string pivote  )     )
      

   

    ;LISTA DERECHA
    (do
        (;valores del bucle
         (i 0 (+ i 1))
         (posicionenPantalla (+ posicionUltima 100) (+ posicionenPantalla 10))
         )
      ;condición y sentencia de salida
      ( (= i (vector-length vectorDerecha    )) posicionenPantalla )

      ;cuerpo del bucle
      ( (draw-solid-rectangle ventana1) (make-posn posicionenPantalla (- 750(* 10 (vector-ref vectorDerecha i))) ) 9 (* 10 (vector-ref vectorDerecha i)) "blue")
      ( (draw-string ventana1) (make-posn posicionenPantalla 770 ) (number->string(vector-ref vectorDerecha i )  )     )
      )
    

    ;Ahora espera hasta que el usuario hace click
    ( (draw-rectangle ventana1)  (make-posn 35 770) 130 30 "red")
    ( (draw-string ventana1)  (make-posn 35 785) "Continuar")

    (define click (get-mouse-click ventana1))

    (if (and (and (> (posn-x (mouse-click-posn click)) 35) (< (posn-x (mouse-click-posn click)) 130))
             (and (> (posn-y (mouse-click-posn click)) 770) (< (posn-y (mouse-click-posn click)) 785)))
        (display "Siguiente") 
        )

    ;(display vector2)


    ;(define nuevoVectorIzquierda3 (vector))
    ;(define nuevoVectorDerecha (vector))
   
    (define (aux1 vector2 pivote )
      
      (define (introducirIzquierda nuevoVectorIzquierda vector2 pivote i)
        ;(display vector2)
        (define a (list (vector-ref vector2 i)))
        ;(display nuevoVectorIzquierda)
        ;(display a)
        ;(newline)
        (if (not (= (vector-length vector2) 0))
            (if (and (< (car a) pivote) (not (= (car a) pivote) ))
                (append nuevoVectorIzquierda a)
                )
            )
        )

      
     ; (display vector2)
      ;(newline)
      ;(display pivote)
      (do
          (;definicion de variables
           (i 0 (+ i 1))
           (nuevoVectorIzquierda (list) (introducirIzquierda nuevoVectorIzquierda vector2 pivote i))
           )
        ;condicion y sentencia de salida
        ( (= i (- (vector-length vector2) 1)) nuevoVectorIzquierda)
        
        ;cuerpo del bucle
        ;(if (and (< (vector-ref vector i) pivote) (not (= (vector-ref vector i) pivote) ))
            ;(vector-append nuevoVectorIzquierda (vector (vector-ref vector i )))
            ;)
        )
      )
    
    (define a (aux1 vector2 pivote))
    (display a)
    
    (if (odd? (vector-length a))
        (vector-set! vectorFinal (+ (/ 1 2) (/ (vector-length a) 2)) (vector-ref a (+ (/ 1 2) (/ (vector-length a) 2))))
        (vector-set! vectorFinal  (- (/ (vector-length a) 2) 1)  (vector-ref a (- (/ (vector-length a) 2) 1) ))
        )

    (if (odd? (vector-length a))
        (aux (vector-ref a (+ (/ 1 2) (/ (vector-length a) 2))) (vector-copy vector 0 (- (+ (/ 1 2) (/ (vector-length a) 2))  1)) (vector-copy vector  (+ (/ 1 2) (/ (vector-length a) 2)) (vector-length a)) a  vectorFinal  )
        (aux (vector-ref a (- (/ (vector-length a) 2) 1) ) (vector-copy vector 0 (- (/ (vector-length a) 2) 1)) (vector-copy vector (/ (vector-length a) 2) (vector-length a)) a vectorFinal)
        )
    

    (define (aux2 vector2 pivote)
      (do
          (;definicion de variables
           (i 0 (+ i 1))
           (nuevoVectorDerecha (vector) )
           )
        ;condicion y sentencia de salida
        ( (= i (- (vector-length vector2) 1)) nuevoVectorDerecha)
        ;cuerpo del bucle
        (if (and (> (vector-ref vector2 i) pivote) (not (= vector-ref vector2 i) pivote))
            (vector-append nuevoVectorDerecha (vector (vector-ref vector2 i)))
            )
        )
      )

    (define b (aux2 vector2 pivote))
    
    (if (odd? (vector-length b))
        (vector-set! vectorFinal (+ (/ 1 2) (/ (vector-length b) 2)) (vector-ref b (+ (/ 1 2) (/ (vector-length b) 2))))
        (vector-set! vectorFinal  (- (/ (vector-length b) 2) 1)  (vector-ref b (- (/ (vector-length b) 2) 1) ))
        )

    (if (odd? (vector-length b))
        (aux (vector-ref b (+ (/ 1 2) (/ (vector-length b) 2))) (vector-copy vector 0 (- (+ (/ 1 2) (/ (vector-length b) 2))  1)) (vector-copy vector  (+ (/ 1 2) (/ (vector-length b) 2)) (vector-length b)) b  vectorFinal  )
        (aux (vector-ref b (- (/ (vector-length b) 2) 1) ) (vector-copy vector 0 (- (/ (vector-length b) 2) 1)) (vector-copy vector (/ (vector-length b) 2) (vector-length b)) b vectorFinal)
        )
    
    
    

    
    )




  
  (mensaje "Se muestra el vector antes de ordenar por Quick sort")
  (mostrarVector vector)
  (mensaje "Continuar...?")

  (define vectorFinal (make-vector (vector-length vector)))
  (if (odd? (vector-length vector))
      (vector-set! vectorFinal (- (/ (vector-length vector) 2) (/ 1 2) ) (vector-ref vector (- (/ (vector-length vector) 2) (/ 1 2) )))
      (vector-set! vectorFinal  (- (/ (vector-length vector) 2) 1)  (vector-ref vector (- (/ (vector-length vector) 2) 1) ))
      )
  
  (if (odd? (vector-length vector))
      (and
       (mensaje "Se muestra el vector ordenado")
       (mostrarVector (aux (vector-ref vector (- (/ (vector-length vector) 2) (/ 1 2) )) (vector-copy vector 0 (- (/ (vector-length vector) 2) (/ 1 2) ) ) (vector-copy vector  (+ 1 (- (/ (vector-length vector) 2) (/ 1 2) )) (vector-length vector)) vector  vectorFinal  ))
       (mensaje "Continuar...?")
       )
      
      (and
       (mensaje "Se muestra el vector ordenado")
       (mostrarVector (aux (vector-ref vector (- (/ (vector-length vector) 2) 1) ) (vector-copy vector 0 (- (/ (vector-length vector) 2) 1)) (vector-copy vector (/ (vector-length vector) 2) (vector-length vector)) vector vectorFinal))
       (mensaje "Continuar...?")
       )
      )
  )
(quickSort #(5 1 0 4 7 8 2 3 9))