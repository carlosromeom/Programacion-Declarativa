;EJERCICIO 1
(define (contarCifrasIterativo n)
  (define (resultado n i)
    (/ n i)
    )
 
    (do
        ;;variables del bucle
        (
         (i 10 (* 10 i))
         (contador 1 (+ contador 1))
         )
      ;;condición y sentencia de salida
      ((< (resultado (abs n) i) 1) contador)
      )
  )


(define (contarCifrasRecursivo n)
  
  (define (auxContar absoluto contador)
    (if (> 1 (/ absoluto (expt 10 contador)))
        contador ;devuelve el contador (número de cifras)
        (auxContar absoluto ( + 1 contador))
        )
    )

  (let(
       (absoluto (abs n))
       )
    
    (auxContar absoluto 1)
    )
  )

;EJERCICIO 2
(define (extraerCifraIterativo n c)
  
  (define divisor (expt 10 c))
  (define resto (modulo n divisor))

  (do
      ;;variables del bucle
      (
       (aux1 resto (/ (- n (modulo n 10)) 10) )
      )
  ;;condicion y sentencia de salida
  ((= (contarCifrasIterativo aux1) 1) aux1)
  )
)


(define (extraerCifraRecursivo n c)
  
  (define (aux n)
    (if (= (contarCifrasIterativo n) 1)
        n
        (aux (quotient n 10))
        )
    )

 
  (define divisor (expt 10 (abs c)))
  (define resto (modulo (abs n) divisor))
  (aux resto)
)
;(extraerCifraRecursivo 678 3) ;6

;EJERCICIO 3

(define (sumarDigitosIterativo n)  
  (define numeroCifras (contarCifrasIterativo n))
  (do
      ( ;;variables del bucle
       (i numeroCifras (- i 1))
       (resultado 0 (+ resultado (extraerCifraRecursivo (abs n) i)) )
       )
    ;;condicion y sentencia de salida
    ( (= 0 i) resultado)
    )
  )

(define (sumarDigitosRecursivo n)
  
    (define (aux2 n resultado)
      (define numeroCifras (contarCifrasIterativo n))
      (define res (+ resultado  (extraerCifraRecursivo n 1) ))
      (if (= numeroCifras 1)
          res
          (aux2 (quotient n 10) res)
       )
      
      )
  
  (aux2 (abs n) 0)
)

; (sumarDigitosRecursivo 1458) ;18


;EJERCICIO 4
(define (reducirNumeroIterativo n)
  (do
      (;variables del bucle
       (suma (sumarDigitosIterativo n) (sumarDigitosIterativo suma))
       )
    ;condicion y sentecia de salida
    ( (= 1 (contarCifrasIterativo suma)) suma)
    )
)

;(reducirNumeroIterativo 19875) ;3

(define (reducirNumeroRecursivo n)
  (define (aux3 n)
    (if (= (contarCifrasIterativo n) 1)
        n
        (aux3 (sumarDigitosIterativo n) )
        )
    )
  
  (aux3 (abs n))
)

;(reducirNumeroRecursivo 19875) ;3

;EJERCICIO 5
(define (primoIterativo? n)
  (define (aux4 n)
    (do
        (;variables del bucle
         (contador 2 (+ contador 1))
         )
      ;condicion y sentencia de salida
      ( (= (modulo n contador) 0) contador)
      )
    )
  (if ( = (aux4 (abs n)) n)
      true
      false
      )
)

;(primoIterativo? 11) ;#t

(define (primoRecursivo? n)
  (define (aux5 n contador)
    (if (= contador n)
        true
    
        (if  (= (modulo n contador) 0)
             false
             (aux5 n (+ contador 1))
        )
    )
   )
  
  (aux5 (abs n) 2)        
)
;(primoRecursivo? 112) ;#f
;(primoRecursivo? 11) ; #t

;EJERCICIO 6 
(define (integral a b f n)
  (define h (/ (- b a) n))
  (do
      (;variables del bucle
       (i 0 (+ i 1))
       (xi a (+ (* i h) a))
       (xi+1 (+ a h) (+ (*  (+ 1 i) h) a ))
       (suma 0. (+ suma (* (/ (+ (f xi) (f xi+1)) 2) h) ))
       )
    ;condicion y sentencia de salida
    ( (= i n) suma )
    )
)

(define (funcionApartadoB x)
  (+ 1 (* 3 x x))
)

;(integral 0 3 funcionApartadoB 100000) ;29.99919000944992

;APARTADO C
(define (sumar-serie termino siguiente inicial final)
  (if(> inicial final)
     0
     (+ (termino inicial)(sumar-serie termino siguiente (siguiente inicial) final))
     )
  )

(define (integral f inicial final h);; función para obtener el siguiente elemento
  (define(sumar-h x) (+ x h))
  ;; cuerpo de integral
  (*(sumar-serie f sumar-h ( + inicial (/ h 2)) final) h )
  )
;(integral funcionApartadoB 0 3 0.001)

;EJERCICIO 7
(define (sumaSerie f siguiente inicial cota)
 
  (do
      (;variables del bucle
       
       (n inicial (siguiente n))
       (suma 0. (+ suma (f n)))
       )
    ;condición y sentencia de salida
     (  (< (abs (f n) ) cota) suma)
    )
  )


(define (leibniz x)
  (/ (expt -1 x) (+ (* 2 x) 1))
)

(define (siguiente termino-a-sumar)
  (+ termino-a-sumar 1)
)

;(sumaSerie leibniz siguiente 0 0.000001)


(define (sumaSerieRecursiva  f siguiente inicial cota)
  (define (aux f siguiente n cota suma)
     (if
      (< (abs (f n)) cota)
         suma
         (aux f siguiente (siguiente n) cota (+ suma (f n)))
         )
    )
   (aux f siguiente inicial cota 0.)
    
)
;(sumaSerieRecursiva leibniz siguiente 0 0.01)


;EJERCICIO 8
(define (terminoNumeroE n)
   (expt (+ 1. (/ 1 n)) n) 
)

(define (limiteSucesionNumeroE cota)
  (do
      (;variables del bucle
       (actual (terminoNumeroE 1) (terminoNumeroE i)   )
       (siguiente (terminoNumeroE 2) (terminoNumeroE (+ 1 i) ))
       (i 1 (+ i 1))
       )
       
    ;condición y sentencia de salida
    ( (< (abs (- siguiente actual)) cota)  actual)
    )
  )
;(limiteSucesionNumeroE 0.0000000000000000000000000000000000000000000000000000000000000000000000001) 

;EJERCICIO 9

(define (limiteIterativa terminogeneral cota)
  (do
      (;variables del bucle
       (actual (terminogeneral 1) (terminogeneral i)   )
       (siguiente (terminogeneral 2) (terminogeneral (+ 1 i) ))
       (i 1 (+ i 1))
       )
       
    ;condición y sentencia de salida
    ( (< (abs (- siguiente actual)) cota)  actual)
    )
)

;APARTADO B
;(limiteIterativa terminoNumeroE 0.0000000000001)

;EJERCICIO 10
(define (sumaAureoIterativo n)
  (do
      (;variables del bucle
       (actual 1 (sqrt (+ actual 1)))
       (i 0 (+ i 1))
       )
    ;condicion y sentencia de salida

    ( (= i n) actual)
    )                       
)

;(sumaAureoIterativo 454)

(define (sumaAureoRecursivo n)
  (define (aux n i actual)
    (if(not (= n i))
       (aux n (+ i 1) (sqrt (+ actual 1)))
       actual
       )
  )
  (aux n 1 1) 
)

;(sumaAureoRecursivo 45)

;EJERCICIO 11
(define (fraccionContinua n)
  (do
      (;variables del bucle
       (i (- n 1) (- i 1))
       (sumando (+ (* 2. n) 1) (+ ( / (* (+ 1 i) (+ 1 i) ) sumando) ( + 1 ( * 2 i))))  
       )
    ;condicion y sentencia de salida
    
    ( (= i -1) (/ 4 sumando))
    
    )
)

;(fraccionContinua 778)

;EJERCICIO 12
(define (calcularArriba i actualArriba)
  (if (even? i)
      (+ actualArriba 2)
      actualArriba
      )    
)

(define (calcularAbajo i actualAbajo)
  (if (even? i)
      actualAbajo
      (+ actualAbajo 2)
      )
)

(define (factorWallis n)
  (if (= n 0)
      (set! n 1)
      )
  (do
      (;variables del bucle
       (i 1 (+ i 1))
       (actualArriba 2. (calcularArriba (+ i 1) actualArriba) )
       (actualAbajo 3. (calcularAbajo (+ i 1) actualAbajo) )
       )
    ;condicion y sentencia de salida
    ( (= i (abs n)) (/ actualArriba actualAbajo))
    )
)

;(factorWallis 3)

(define (WallisIterativa n)
  (do
      (;variables del bucle
       (i 0 (+ i 1))
       (suma 1 (* suma (factorWallis (+ i 1)))  )
       ) 
    ;condicion y sentencia de salida
    ( (= i (abs n)) suma)
    )
  )

;(WallisIterativa 4)


(define (wallisRecursiva cota)
  (define (aux cota resultado contador factor)
       (if (and  (< (- (/ pi 4) cota) factor) (< factor (+ (/ pi 4) cota)))
        resultado  
        (aux cota (WallisIterativa contador) (+ contador 1) (factorWallis contador)) 
        )
     )

  (aux cota 0 1 1)
  )


;EJERCICIO 13
(define (funcionApartadoB x)
  (+ 1 (* 3 x x))
)

(define (incrementoFuncional f x)
  (/ (+ (- (f (+ x 1.)) (* 2 (f x))) (f(- x 1))) 4)
)

;(incrementoFuncional funcionApartadoB 2)