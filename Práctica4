(require racket/vector)

;EJERCICIO 1
;; 
;; Nombre: productoEscalar
;; Objetivo: Calcula el producto escalar de dos vectores.
;; Parámetros:
;;         v1: primer vector.
;;         v2: segundo vector.
;; Resultado: 
;;         Producto escalar entre ambos vectores.
;; Funciones a las que llama: ninguna.
;;

(define (productoEscalar v1 v2)
  ;compruebo si son vectores y si tienen la misma longitud
  (if (not (or (vector? v1) (vector? v1)))
      #f
      (if (not (= (vector-length v1) (vector-length v2)))
          #f
          (do
              (;definición de variables
               (i 0 (+ i 1))
               (suma 0 (+ suma (* (vector-ref v1 i) (vector-ref v2 i))))
               )
            ;condición y sentencia de salida
            ( (= i (vector-length v1)) suma)
            )
          )
           
      )
  )

;(productoEscalar #(1 0 2 0 1) #(1 2 3 4 5))

;EJERCICIO 2
;; 
;; Nombre: aplicarMatriz
;; Objetivo: Calcula el producto escalar de un vector por cada una de las columnas de una matriz.
;; Parámetros:
;;         v: vector.
;;         m: matriz.
;; Resultado: 
;;         Producto escalar entre el vector y todas las columnas de la matriz contenido en un vector.
;; Funciones a las que llama: sacarColumna y productoEscalar.
;;

;; 
;; Nombre: sacarColumna
;; Objetivo: Introduce en un vector la columna de una matriz
;; Parámetros:
;;         pos: posicion de donde sacar la columna de la matriz
;;         m: matriz.
;; Resultado: 
;;         Vector con una columna de la matriz.
;; Funciones a las que llama: ninguna.
;;

(define (sacarColumna m pos)
  (do
      (
       ;definición de variables
       (i 0 (+ i 1))
       (u #() (vector-append u (vector (vector-ref (vector-ref m i) pos))))
       )
    ( (= i (vector-length m)) u)
    )
  )


(define (aplicarMatriz v m)
  (if (not (= (vector-length v) (vector-length m)))
      #f
      (do
          (;definición de variables
           (i 0 (+ i 1))
           (resultado #() (vector-append resultado (vector  (productoEscalar v (sacarColumna m i)))))
           )
        ;condición y sentencia de salida
        ( (= i (vector-length (vector-ref m 0))) resultado)
        )
      )
  )

;(aplicarMatriz #(1 1 1) #(#(1 2) #(3 4) #(5 6)))

;EJERCICIO 3
;; 
;; Nombre: productoVectorial
;; Objetivo: Calcula el producto vectorial de dos vectores en el espacio.
;; Parámetros:
;;         u: vector 1.
;;         v: vector 2.
;; Resultado: 
;;         Producto vectorial entre ambos vectores contenido en un vector.
;; Funciones a las que llama: productoEscalar.
;;

(define (productoVectorial u v)
  (define wx (- (* (vector-ref u 1) (vector-ref v 2)) (* (vector-ref u 2) (vector-ref v 1))))
  (define wy (- (* (vector-ref u 2) (vector-ref v 0)) (* (vector-ref u 0) (vector-ref v 2))))
  (define wz (- (* (vector-ref u 0) (vector-ref v 1)) (* (vector-ref u 1) (vector-ref v 0))))
  (define w (vector wx wy wz) )
  (if (and (= (productoEscalar u w) 0 ) (= (productoEscalar v w) 0))
      w
      #f
      )
  )
;(productoVectorial #(2 0 1) #(1 -1 3))

;EJERCICIO 4
;; 
;; Nombre: meanVector
;; Objetivo: Calcula la media aritmética de los valores de un vector.
;; Parámetros:
;;         v: vector con los valores para la media.
;; Resultado: 
;;         Media aritmética de los valores de un vector.
;; Funciones a las que llama: ninguna.
;;
(define (meanVector v)
  (if (= (vector-length v) 0)
      #f
      (do
          (;definición de variables
           (i 0 (+ i 1))
           (suma 0. (+ suma (vector-ref v i)))
           )
        ;condición y sentencia de salida
        ( (= i (vector-length v)) (/ suma (vector-length v)))
        )
      )
  )
;(meanVector #(2. 4. 8. 5. 7.))



;; 
;; Nombre: maxMin
;; Objetivo: Devuelve el máximo de los valores mínimos de las filas de una matriz.
;; Parámetros:
;;         m: matriz.
;; Resultado: 
;;         Valor máximo de entre los valores mínimos de las filas de una matriz.
;; Funciones a las que llama: cambiarValorMinimoy sacarMaximoVector.
;;


;; 
;; Nombre: cambiarValorMinimo
;; Objetivo: Calcula el valor mínimo entre un vector. Cálculo recursivo.
;; Parámetros:
;;         fila: vector con la fila de matriz donde calcular el valor mínimo.
;;         minimo: valor mínimo actual.
;;         i: posición del actual valor mínimo dentro del vector
;; Resultado: 
;;         Valor mínimo del vector
;; Funciones a las que llama: ninguna.
;;

;; 
;; Nombre: sacarMaximoVector
;; Objetivo: Calcula el valor máximo entre un vector. Cálculo recursivo.
;; Parámetros:
;;         v vector donde calcular el valor mínimo.
;;         maximo valor máximo actual.
;;         i: posición del actual valor máximo dentro del vector
;; Resultado: 
;;         Valor máximo del vector
;; Funciones a las que llama: ninguna.
;;

(define (cambiarValorMinimo fila minimo i)
  (if ( = (- (vector-length fila) 1) i)
      minimo
      (if (> minimo (vector-ref fila (+ i 1)))
          (cambiarValorMinimo fila (vector-ref fila (+ i 1)) (+ i 1)) 
          (cambiarValorMinimo fila minimo (+ i 1))
          )
      )
  )

(define (sacarMaximoVector v maximo i)
  (if ( = (- (vector-length v) 1) i)
      maximo
      (if (< maximo (vector-ref v (+ i 1)))
          (sacarMaximoVector v (vector-ref v (+ i 1)) (+ i 1)) 
          (sacarMaximoVector v maximo (+ i 1))
          )
      )
  )

(define (maxMin m )
  (do
      (;definicion de variables
       (fila 0 (+ fila 1))
       (minimosFilas #() (vector-append minimosFilas (vector (cambiarValorMinimo (vector-ref m fila) (vector-ref (vector-ref m fila) 0) 0))))
       )
    ;condicion y sentencia de salida
    ( (= (vector-length minimosFilas) (vector-length m) ) (sacarMaximoVector minimosFilas (vector-ref minimosFilas 0) 0))
    )
  )

;(maxMin #(#(910. 91. 93.) #(4. 5. 6.) #(7. 8. 9.))) ;91.0


;EJERCICIO 5
;; 
;; Nombre: filtrarPrimos
;; Objetivo: Función que dada una lista de números, devuelve otra rellena sólo con los números primos de la primera lista.
;; Parámetros:
;;         lista: lista de números entre los que buscar los primos.
;; Resultado: 
;;         Lista con los números primos
;; Funciones a las que llama: primo?.
;;

;; 
;; Nombre: primo?
;; Objetivo: Predicado que determina si un número natural es primo o no.
;; Parámetros:
;;         n: número a considerar primo o no.
;; Resultado: 
;;         True o false
;; Funciones a las que llama: ninguna.
;;

(define (primo? n)
  (define (aux4 n)
    (do
        (;variables del bucle
         (contador 2 (+ contador 1))
         )
      ;condicion y sentencia de salida
      ( (= (modulo n contador) 0) contador)
      )
    )
  (if ( = (aux4 (abs n)) n)
      true
      false
      )
)



(define (filtrarPrimos lista)
  
  (define (aux lista primos i)
    (if (= i (length lista) )
        primos
        (if (primo? (list-ref lista i))
            (aux lista (append primos  (list(list-ref lista i)) ) (+ i 1) )
            (aux lista primos (+ i 1))
            )
        )
    )
  (aux lista '() 0)

  )
;(filtrarPrimos '(2 4 5 15 17 33))

;EJERCICIO 6
;; 
;; Nombre: suprimir
;; Objetivo: Función que dada una lista de objetos que puede tener sublistas y un elemento, devuelve otra rellena con los elementos de la primera excluyendo el elemento dado.
;; Parámetros:
;;         lista: lista de elementos.
;;         x: elemento a suprimir de la lista anterior
;; Resultado: 
;;         Lista con el elemento indicado suprimido de la lista inicial
;; Funciones a las que llama: función auxiliar.
;;

(define (suprimir lista x)
  (define (aux lista sublista x )
    (if (not (null? lista))
        (if (list? (car lista))
           (aux (cdr lista) (append sublista (list (aux (car lista) '() x))) x)
            (if (not (equal? (car lista) x))
                (aux (cdr lista) (append sublista (list(car lista))) x)
                (aux (cdr lista) sublista x)
                )
            )
            sublista
            )
        )
    (aux lista '() x)
    )

;(suprimir '( a b d c ( a b a ) ( d ( e g ) f ) b ) 'a )

;EJERCICIO 7
;; 
;; Nombre: mergeSort
;; Objetivo: Función que dada una lista de números, la ordena según el método mergeSort.
;; Parámetros:
;;         lista: lista de números a ordenar.
;; Resultado: 
;;         Lista ordenada.
;; Funciones a las que llama: split y merge.
;;

;; 
;; Nombre: split
;; Objetivo: Función que reparte los elementos de una lista en dos según el criterio de mergeSort.
;; Parámetros:
;;         lista: lista de números para dividir.
;; Resultado: 
;;         Lista compuesta de dos sublistas con los elementos de la lista inicial repartidos en ellas.
;; Funciones a las que llama: Función auxiliar.
;;

;; 
;; Nombre: merge
;; Objetivo: Función que dadas dos listas, las une en una sola de forma ordenada.
;; Parámetros:
;;         lista1: lista 1 para unir.
;;         lista2: lista 2 para unir.
;; Resultado: 
;;         Lista compuesta de lista1 y lista2 con sus elementos ordenados de menor a mayor.
;; Funciones a las que llama: ninguna.
;;

(define (aux lista listaIzquierda listaDerecha i)
  (if (= i (length lista))
      (append (list listaIzquierda) (list listaDerecha))
      (if (even? i)
          (aux lista (append listaIzquierda (list (list-ref lista i)) ) listaDerecha (+ i 1))
          (aux lista listaIzquierda (append listaDerecha (list (list-ref lista i)) ) (+ i 1))
          )
      )
  )

(define (split lista)
  (if (= (length lista) 0)
      '( () () )
      (if (= (length lista) 1)
          (list lista '()  )
          (aux lista '() '() 0)
          )
      )
  )
;(split '(5 4 1 3 2))



(define (merge lista1 lista2)
  (if (and (= (length lista1) 0) (= (length lista2) 0))
      '()
      (if (and (= (length lista1) 0) (>= (length lista2) 1))
          (sort ( append '() lista2 )<) 
            (if (and (>= (length lista1) 1) (= (length lista2) 0))
               (sort (append lista1 '() )<)
                (sort(append lista1 lista2)<)
                )
            )
      )
  )

;(merge '( 1 9 3) '(4 5 6))

(define (mergeSort lista)
  ;primero se le hace un split
  (define listaDividida (split lista) )

  ;ahora se hace un merge
  (merge (car listaDividida) (car (cdr listaDividida))) 
)

;(mergeSort  '(5 4 9 3 2))


;EJERCICIO 8
;; 
;; Nombre: mergeSortDatos
;; Objetivo: Función que ordena una cantidad variable de datos según el método mergeSort.
;; Parámetros:
;;         lista1: lista de elementos a ordenar.
;; Resultado: 
;;         Lista ordenada con los elementos dados.
;; Funciones a las que llama: mergeSort.
;;

(define mergeSortDatos
  (lambda lista    
    (mergeSort lista)
    )
  )

;(mergeSortDatos 2 3 4 676 1) 
;(mergeSortDatos )
;(mergeSortDatos 2)
;(mergeSortDatos 3 2)

;EJERCICIO 9
;; 
;; Nombre: listaOrdenada?
;; Objetivo: Predicado que recibe una lista de números y comprueba si está ordenada ascendentemente.
;; Parámetros:
;;         lista: lista para comprobar si está ordenada.
;; Resultado: 
;;         true o false.
;; Funciones a las que llama: mergeSort.
;;

(define (listaOrdenada? lista)
  (if (equal? lista (mergeSort lista))
      #t
      #f
      )
  )
;(listaOrdenada? '( 1 2 43 4 5)) ; #f
;(listaOrdenada? '( 1 2 3 4 5)) ; #t


;; 
;; Nombre: ordenados?
;; Objetivo: Predicado que dada una cantidad variable de números, comprueba si éstos están ordenados ascendentemente.
;; Parámetros:
;;         lista: lista donde se meten los números.
;; Resultado: 
;;         true o false.
;; Funciones a las que llama: mergeSort.
;;
(define ordenados?
  (lambda lista
    (if (equal? lista (mergeSort lista))
        #t
        #f
        )
    )
  )
;(ordenados? 1 2 3 4 5) ; #t
;(ordenados? 3 1 2 ) ; #f

;EJERCICIO 10
;; 
;; Nombre: aplicarLista
;; Objetivo: Función que recibe una función y una lista de números a los que aplicarle esa función.
;; Parámetros:
;;         f: función.
;;         lista: lista de números a los que aplicarle la función pasada.
;; Resultado: 
;;         Lista con los resultados de aplicarle la función a los números de la lista inicial.
;; Funciones a las que llama: ninguna.
;;
(define (aplicarLista f lista)
  (if (not (procedure? f))
      '()
      (if (not (list? lista))
          '()
          (map f lista) 
          )
      )
  )
;(aplicarLista sqrt '(1 2 3 4))
;(aplicarLista sqrt '())
;(aplicarLista "a" '(1 2 3 4))


;; 
;; Nombre: aplicar
;; Objetivo: Función que recibe una función (parémtro fijo) y cantidad variable de números a los que aplicarle esa función.
;; Parámetros:
;;         f: función.
;;         lista: lista de números a los que aplicarle la función pasada.
;; Resultado: 
;;         Lista con los resultados de aplicarle la función a los números de la lista inicial.
;; Funciones a las que llama: ninguna.
;;
(define aplicar
  (lambda (f . lista)
    (aplicarLista f lista)
    )
  )

;(aplicar sqrt 1 2 3 4)
;(aplicar "a" 1 2 3 4)
;(aplicar sqrt )