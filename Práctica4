(require racket/vector)
;EJERCICIO 1
(define (productoEscalar v1 v2)
  ;compruebo si tienen la misma longitud
  (if (not (and (vector? v1) (vector? v1)))
      #f
           (if (not (= (vector-length v1) (vector-length v2)))
               #f
               (do
                   (;definición de variables
                    (i 0 (+ i 1))
                    (suma 0 (+ suma (* (vector-ref v1 i) (vector-ref v2 i))))
                    )
                 ;condición y sentencia de salida
                 ( (= i (vector-length v1)) suma)
                 )
               )
           
           )
  )

;(productoEscalar #(1 0 2 0 1) #(1 2 3 4 5))

;EJERCICIO 2
(define (sacarColumna m pos)
  (do
      (
       ;definición de variables
       (i 0 (+ i 1))
       ;(v (vector-ref m 0) (vector-ref m i) )
       (u #() (vector-append u (vector (vector-ref (vector-ref m i) pos))))
       )
    ( (= i (vector-length m)) u)
    )
  )


(define (aplicarMatriz v m)
  (if (not (= (vector-length v) (vector-length m)))
      #f
      (do
          (;definición de variables
           (i 0 (+ i 1))
           ;(vectorcolumna (sacarColumna m 0)  )
           (resultado #() (vector-append resultado (vector  (productoEscalar v (sacarColumna m i)))))
           )
        ;condición y sentencia de salida
        ( (= i (vector-length (vector-ref m 0))) resultado)
        )
      )
  )

;(aplicarMatriz #(1 1 1) #(#(1 2) #(3 4) #(5 6)))

;EJERCICIO 3

(define (productoVectorial u v)
  (define wx (- (* (vector-ref u 1) (vector-ref v 2)) (* (vector-ref u 2) (vector-ref v 1))))
  (define wy (- (* (vector-ref u 2) (vector-ref v 0)) (* (vector-ref u 0) (vector-ref v 2))))
  (define wz (- (* (vector-ref u 0) (vector-ref v 1)) (* (vector-ref u 1) (vector-ref v 0))))
  (define w (vector wx wy wz) )
  (if (and (= (productoEscalar u w) 0 ) (= (productoEscalar v w) 0))
      w
      #f
      )
  )
;(productoVectorial #(2 0 1) #(1 -1 3))

;EJERCICIO 4
(define (meanVector v)
  (do
      (;definición de variables
       (i 0 (+ i 1))
       (suma 0. (+ suma (vector-ref v i)))
       )
    ;condición y sentencia de salida
    ( (= i (vector-length v)) (/ suma (vector-length v)))
    )
  )
;(meanVector #(2. 4. 8. 5. 7.))


;ME QUEDO AQUI, TERMINAR O REHACER ESTA FUNCION
(define (sacarMinimoFila m fila)
  (do
      (;definición de variables
       (i 0 (+ i 1))
       (minimo (vector-ref (vector-ref m fila) 0) (vector-ref (vector-ref m fila) (+ i 1)))
       )
    ;condición y sentencia de salida
    ( (
)

(define (maxMin m )
  (do
      (fila 0 (+ fila 1))
      (minimosFilas #() (vector-append  minimosFilas (sacarMinimoFila m fila)))
    
)