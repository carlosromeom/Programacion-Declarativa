(require racket/vector)
;EJERCICIO 1
(define (productoEscalar v1 v2)
  ;compruebo si tienen la misma longitud
  (if (not (and (vector? v1) (vector? v1)))
      #f
           (if (not (= (vector-length v1) (vector-length v2)))
               #f
               (do
                   (;definición de variables
                    (i 0 (+ i 1))
                    (suma 0 (+ suma (* (vector-ref v1 i) (vector-ref v2 i))))
                    )
                 ;condición y sentencia de salida
                 ( (= i (vector-length v1)) suma)
                 )
               )
           
           )
  )

;(productoEscalar #(1 0 2 0 1) #(1 2 3 4 5))

;EJERCICIO 2
(define (sacarColumna m pos)
  (do
      (
       ;definición de variables
       (i 0 (+ i 1))
       ;(v (vector-ref m 0) (vector-ref m i) )
       (u #() (vector-append u (vector (vector-ref (vector-ref m i) pos))))
       )
    ( (= i (vector-length m)) u)
    )
  )


(define (aplicarMatriz v m)
  (if (not (= (vector-length v) (vector-length m)))
      #f
      (do
          (;definición de variables
           (i 0 (+ i 1))
           ;(vectorcolumna (sacarColumna m 0)  )
           (resultado #() (vector-append resultado (vector  (productoEscalar v (sacarColumna m i)))))
           )
        ;condición y sentencia de salida
        ( (= i (vector-length (vector-ref m 0))) resultado)
        )
      )
  )

;(aplicarMatriz #(1 1 1) #(#(1 2) #(3 4) #(5 6)))

;EJERCICIO 3

(define (productoVectorial u v)
  (define wx (- (* (vector-ref u 1) (vector-ref v 2)) (* (vector-ref u 2) (vector-ref v 1))))
  (define wy (- (* (vector-ref u 2) (vector-ref v 0)) (* (vector-ref u 0) (vector-ref v 2))))
  (define wz (- (* (vector-ref u 0) (vector-ref v 1)) (* (vector-ref u 1) (vector-ref v 0))))
  (define w (vector wx wy wz) )
  (if (and (= (productoEscalar u w) 0 ) (= (productoEscalar v w) 0))
      w
      #f
      )
  )
;(productoVectorial #(2 0 1) #(1 -1 3))

;EJERCICIO 4
(define (meanVector v)
  (do
      (;definición de variables
       (i 0 (+ i 1))
       (suma 0. (+ suma (vector-ref v i)))
       )
    ;condición y sentencia de salida
    ( (= i (vector-length v)) (/ suma (vector-length v)))
    )
  )
;(meanVector #(2. 4. 8. 5. 7.))



(define (cambiarValorMinimo fila minimo i)
  (if ( = (- (vector-length fila) 1) i)
      minimo
      (if (> minimo (vector-ref fila (+ i 1)))
          (cambiarValorMinimo fila (vector-ref fila (+ i 1)) (+ i 1)) 
          (cambiarValorMinimo fila minimo (+ i 1))
          )
      )
  )

(define (sacarMaximoVector v maximo i)
  (if ( = (- (vector-length v) 1) i)
      maximo
      (if (< maximo (vector-ref v (+ i 1)))
          (sacarMaximoVector v (vector-ref v (+ i 1)) (+ i 1)) 
          (sacarMaximoVector v maximo (+ i 1))
          )
      )
  )

(define (maxMin m )
  (do
      (;definicion de variables
       (fila 0 (+ fila 1))
       (minimosFilas #() (vector-append minimosFilas (vector (cambiarValorMinimo (vector-ref m fila) (vector-ref (vector-ref m fila) 0) 0))))
       )
    ;condicion y sentencia de salida
    ( (= (vector-length minimosFilas) (vector-length m) ) (sacarMaximoVector minimosFilas (vector-ref minimosFilas 0) 0))
    )
  )

;(maxMin #(#(910. 91. 93.) #(4. 5. 6.) #(7. 8. 9.))) ;91.0


;EJERCICIO 5
(define (primo? n)
  (define (aux4 n)
    (do
        (;variables del bucle
         (contador 2 (+ contador 1))
         )
      ;condicion y sentencia de salida
      ( (= (modulo n contador) 0) contador)
      )
    )
  (if ( = (aux4 (abs n)) n)
      true
      false
      )
)



(define (filtrarPrimos lista)
  
  (define (aux lista primos i)
    (if (= i (length lista) )
        primos
        (if (primo? (list-ref lista i))
            (aux lista (append primos  (list(list-ref lista i)) ) (+ i 1) )
            (aux lista primos (+ i 1))
            )
        )
    )
  (aux lista '() 0)

  )
;(filtrarPrimos '(2 4 5 15 17 33))

;EJERCICIO 6
(define (suprimir lista x)
  (define (aux lista sublista x )
    (if (not (null? lista))
        (if (list? (car lista))
           (aux (cdr lista) (append sublista (list (aux (car lista) '() x))) x)
            (if (not (equal? (car lista) x))
                (aux (cdr lista) (append sublista (list(car lista))) x)
                (aux (cdr lista) sublista x)
                )
            )
            sublista
            )
        )
    (aux lista '() x)
    )

;(suprimir '( a b d c ( a b a ) ( d ( e g ) f ) b ) 'a )

;EJERCICIO 7
(define (aux lista listaIzquierda listaDerecha i)
  (if (= i (length lista))
      (append (list listaIzquierda) (list listaDerecha))
      (if (even? i)
          (aux lista (append listaIzquierda (list (list-ref lista i)) ) listaDerecha (+ i 1))
          (aux lista listaIzquierda (append listaDerecha (list (list-ref lista i)) ) (+ i 1))
          )
      )
  )

(define (split lista)
  (if (= (length lista) 0)
      '( () () )
      (if (= (length lista) 1)
          (list lista '()  )
         ;(append ( append lista '()  ) '() )
          ;'( (list (car lista)) () )
          (aux lista '() '() 0)
          )
      )
  )
;(split '(5 4 1 3 2))



(define (merge lista1 lista2)
  (if (and (= (length lista1) 0) (= (length lista2) 0))
      '()
      (if (and (= (length lista1) 0) (>= (length lista2) 1))
          (sort ( append '() lista2 )<) 
            (if (and (>= (length lista1) 1) (= (length lista2) 0))
               (sort (append lista1 '() )<)
                (sort(append lista1 lista2)<)
                )
            )
      )
  )

;(merge '( 1 9 3) '(4 5 6))

(define (mergeSort lista)
  ;primero se le hace un split
  (define listaDividida (split lista) )
  ;(display "La lista dividida es: ")
  ;(display listaDividida)

  ;ahora se hace un merge
  (merge (car listaDividida) (car (cdr listaDividida))) 
)
;(mergeSort  '(5 4 9 3 2))


;EJERCICIO 8
(define mergeSortDatos
  (lambda lista    
    (mergeSort lista)
    )
  )

;(mergeSortDatos 2 3 4 676 1) 
;(mergeSortDatos )
;(mergeSortDatos 2)
;(mergeSortDatos 3 2)

;EJERCICIO 9
(define (listaOrdenada? lista)
  (if (equal? lista (mergeSort lista))
      #t
      #f
      )
  )
;(listaOrdenada? '( 1 2 43 4 5)) ; #f
;(listaOrdenada? '( 1 2 3 4 5)) ; #t

(define ordenados?
  (lambda lista
    (if (equal? lista (mergeSort lista))
        #t
        #f
        )
    )
  )
;(ordenados? 1 2 3 4 5) ; #t
;(ordenados? 3 1 2 ) ; #f

;EJERCICIO 10
(define (aplicarLista f lista)
  (do
      (
       (i 0 (+ 1 i))
       (lista2 '() (build-list (list-ref lista i)  f))
       )
    ( (= i (- (length lista) 1)) lista2)
)
  )
  
       