(require racket/vector)
(include "trabajo")
(require (lib "graphics.ss" "graphics"))
;Aqui se guardan los algoritmos de ordenacion modificados para la competicion entre ellos


;;MERGE SORT

;; 
;; Nombre: mergeSort2
;; Objetivo: Función que dada una lista de números, la ordena según el método mergeSort.
;; Parámetros:
;;         lista: lista de números a ordenar.
;; Resultado: 
;;         Lista ordenada.
;; Funciones a las que llama: split y merge.
;;

;; 
;; Nombre: split
;; Objetivo: Función que reparte los elementos de una lista en dos según el criterio de mergeSort.
;; Parámetros:
;;         lista: lista de números para dividir.
;; Resultado: 
;;         Lista compuesta de dos sublistas con los elementos de la lista inicial repartidos en ellas.
;; Funciones a las que llama: Función auxiliar.
;;

;; 
;; Nombre: merge
;; Objetivo: Función que dadas dos listas, las une en una sola de forma ordenada.
;; Parámetros:
;;         lista1: lista 1 para unir.
;;         lista2: lista 2 para unir.
;; Resultado: 
;;         Lista compuesta de lista1 y lista2 con sus elementos ordenados de menor a mayor.
;; Funciones a las que llama: ninguna.
;;

(define (aux lista listaIzquierda listaDerecha i)
  (if (= i (length lista))
      (append (list listaIzquierda) (list listaDerecha))
      (if (even? i)
          (aux lista (append listaIzquierda (list (list-ref lista i)) ) listaDerecha (+ i 1))
          (aux lista listaIzquierda (append listaDerecha (list (list-ref lista i)) ) (+ i 1))
          )
      )
  )

(define (split lista)
  (if (= (length lista) 0)
      '( () () )
      (if (= (length lista) 1)
          (list lista '()  )
          (aux lista '() '() 0)
          )
      )
  )
;(split '(5 4 1 3 2))



(define (merge lista1 lista2)
  (if (and (= (length lista1) 0) (= (length lista2) 0))
      '()
      (if (and (= (length lista1) 0) (>= (length lista2) 1))
          (sort ( append '() lista2 )<) 
          (if (and (>= (length lista1) 1) (= (length lista2) 0))
              (sort (append lista1 '() )<)
              (sort(append lista1 lista2)<)
              )
          )
      )
  )

;(merge '( 1 9 3) '(4 5 6))

(define (mergeSort2 lista)
  ;primero se le hace un split
  (define listaDividida (split lista) )

  ;ahora se hace un merge
  (merge (car listaDividida) (car (cdr listaDividida))) 
  )

;(mergeSort2  '(5 4 9 3 2))
;(mergeSort2 (vector->list #(4 42 21 4 0)))





;ORDENAMIENTO POR INSERCION
(define (buscarPosicion vector2 n i)
  (if (= (vector-length vector2) 0)
      0
      (if (<= n (vector-ref vector2 i)) 
          i
          (if ( <= (+ i 1) (- (vector-length vector2) 1))
              (buscarPosicion vector2 n (+ i 1))
              (vector-length vector2) 
              )
          )
      )
  )
;(buscarPosicion #(1 2 4 0) 3 0)

(define (insertar i vector2 n)
  ;(if (= i (- (vector-length vector2) 1))
  ;(vector-append vector2 (vector n))
  
  ;(define aux (vector-copy vector2 i (vector-length vector2)))
  
  (if (= i 0)
      (vector-append (vector n) vector2)
      (if (= i (vector-length vector2)   )
          (vector-append vector2 (vector n) )
          (vector-append (vector-append (vector-copy vector2 0 i) (vector n)) (vector-copy vector2 i (vector-length vector2)))
          )
      )
  ;)
  )

;(insertar (buscarPosicion #(1 2 4 0) 3 0) #(1 2 4 0) 3)
;(insertar 0 #(1 2 4 3) 0)
;(insertar (vector-length #(1 2 4 3))   #(1 2 4 3) 5)
        

(define (ordenarVector vector vector2 u)
  (if (= u (- (vector-length vector) 1))
      (insertar (buscarPosicion vector2 (vector-ref vector u) 0) vector2 (vector-ref vector u))
      (insertar (buscarPosicion vector2 (vector-ref vector u) 0 ) vector2 (vector-ref vector u ))
       
      )
  )



(define (insertionSort2 vector) 
  (do
      (;definicion de variables
       (i 0 (+ i 1))
       (vector2 #() (ordenarVector vector vector2 i))
       )
    ;condicion y sentencia de salida
    ( (=  (vector-length vector)  (vector-length vector2)) vector2)
    )
  )

;(insertionSort2 #(5 1 0 4))
;(insertionSort2 #(5 1 0 4 -1))
;(insertionSort2 #( 42 21 4 0 42))
;(insertionSort2 (vector  42 21 4 0))
;(insertionSort2 #(2 99 4 6))
;(insertionSort2 (vector  42 21 4 0 95 3 3 535 5 34 3 5 34 3 43 34 3 54 4 54 54  65 667 7 4 53 6 7 57 3 5 7  4 5 3 6 5 7 57 6 86 7 3 5 4 7 6 8 7 8 4 3 5 5 85 78 4 8 58 4 37 36 3 6 3 6363 6 4 7  36 6))






;QUICK SORT

(define (sacarPivote lista)
  ;Selecciono el pivote
  (if (odd? (vector-length (list->vector lista)))
      (vector-ref (list->vector lista) (- (/ (vector-length (list->vector lista)) 2) (/ 1 2) ))
      (vector-ref (list->vector lista) (- (/ (vector-length (list->vector lista)) 2) 1) )
      )
  )

;(sacarPivote '(1 2 3))
;(sacarPivote '(1 4 3 0))


(define (auxIzquierda lista pivote listaOrdenada)
  (if (= (length lista) 0)
      listaOrdenada
      (if (< (car lista) pivote)
          (auxIzquierda (cdr lista) pivote (append listaOrdenada (list (car lista))))
          (auxIzquierda (cdr lista) pivote listaOrdenada)
          )
      )
  )


(define (auxDerecha lista pivote listaOrdenada)
  (if (= (length lista) 0)
      listaOrdenada
      (if (> (car lista) pivote)
          (auxDerecha (cdr lista) pivote (append listaOrdenada (list (car lista))))
          (auxDerecha (cdr lista) pivote listaOrdenada)
          )
      )
  )


(define (ordenarporPivote lista)
  (if (<= (length lista) 1)
      lista
      (let
          (
           (pivote (sacarPivote lista))
           )
        (let
            (
             (listaIzquierda (auxIzquierda lista pivote (list)))
             (listaDerecha (auxDerecha lista pivote (list)))
             )           
          (append (ordenarporPivote listaIzquierda) (list pivote) (ordenarporPivote listaDerecha))
          )
        )
      )
  )


(define (QuickSort2 vector)
  (list->vector (ordenarporPivote (vector->list vector)))
  )
 
 

;(QuickSort2 #(-6 2 5 8 4 3 9 1122 424 24 2424242 0) )
;(QuickSort2 (vector 4 42 21 4 0))
;(QuickSort2 #(2 99 4 6 1 4 -5 56 45567 49 76 90 7 -5 73 ))






;ORDENAMIENTO POR SELECCION


(define (minimo-vector v)
  (do
      (
       (n           (-(vector-length v) 1))
       (i            1                        (+ i 1))
       (minimo (vector-ref v 0)  (if(> minimo (vector-ref v i)) (vector-ref v i) minimo))
       )
    ;; Condiciónde salida
    ((> i n) minimo)
    ;; No hay cuerpo del bucle
    )
  )



(define (seleccionSort2 vector)
  (define (aux lista minimos i)
    ; (open-graphics)
    ;(define ventana1 (open-viewport "Minimo del vector" (+ (* (vector-length vector) 10) 100) 800 ) )
    (if (= i (length lista) )
        (list->vector minimos)     
        (aux lista (append minimos (list (minimo-vector (list->vector (remove* minimos lista ) ) ) )) (+ i 1) )
         
        )
    )
  
  ;filtro los valores repetidos, borro la segunda aparacion de estos
  (define (aux2 vector)
    (define (filtrado vectorFiltrado valor)
      (if (equal? (vector-member valor vectorFiltrado) #f); si no aparece en el vector
          (vector-append vectorFiltrado (make-vector 1 valor) )
          vectorFiltrado
          )
      )
    
    (do
        (;definicion de variables
         (i 0 (+ i 1))
         (vectorFiltrado #() (filtrado vectorFiltrado (vector-ref vector i)))
         )
      ;condicion y sentencia de salida
      ( (= i (vector-length vector)) vectorFiltrado)
      )
                         
    )

  
  (aux (vector->list (aux2 vector)) (list) 0)
  )

;(seleccionSort2 #(2 3 4 21 0 1))
;(seleccionSort2 #(2 3 4 -21 0 1))
;(seleccionSort2 #(2 3 4 21 0 1 3))
;(seleccionSort2 #(2 3 4 2 21 0 1 3))
;(seleccionSort2 #(2 3 4 2 21 0 3 1 3))
;(seleccionSort2 #(2 99 4 6 1 4  56 -5 45567 49 76 90 7 -5 73 ))





;BURBUJA
(define (modificarVector vector2 i) 
  (define aux 0)
  (if (not (= i (- (vector-length vector2) 1)))
      (cond
        (
         (and (> (vector-ref vector2 i) (vector-ref vector2 (+ i 1))))
     
         (set! aux (vector-ref vector2 i))
         (vector-set! vector2 i (vector-ref vector2 (+ i 1)) )
         (vector-set! vector2 (+ i 1) aux )
         )
      
        )
      ) 
  vector2
  )

;(modificarVector (vector 4 2 3) 0)



(define (ordenado? vector)
  (define (aux5 lista)
    (if (= (length lista) 1)
        true
        (if (<= (car lista) (car (cdr lista)))
            (aux5 (cdr lista))
            false
            )
        )
    )

  (aux5 (vector->list vector))
  )
;(ordenado? #(2 3 41 0))
;(ordenado? #(0 1 2 3 4))




(define (burbuja2 vector)
  (define (aux4 vector)
    (do
        (;definicion de variables
         (i 0 (+ i 1))
         (vector2 vector (modificarVector vector2 i) )
         )
      ;condicion y sentencia de salida
      ( ( = i (vector-length vector)) vector)
      )
    )
  
  (define vec (aux4 vector))

  (if (ordenado? vec)
      vec
      (burbuja2 vec)
      )
  )

;(burbuja2 (vector 4 42 21 4 0))
;(burbuja2 (vector 2 99 4 6 1 4 -5 56 45567 49 76 90 7 -5 73 ))




(define (competicion vector)
  (define lista (vector->list vector))
  (define vector2 vector) 
  ;(define resultados '(2 3 5 9 7))
  (define resultados '())
  (define date1 0)
  (define date2 0)

  ;INSERCCION
  (set! date1 (current-seconds))
  (display "Inserccion   ")
  (display (insertionSort2 vector2))
  ;(newline)
  (set! date2 (current-seconds))
  (display "Inserccion    ")
  (display (- date2 date1))

  (append resultados (list (- date2 date1)))

  ;MERGE SORT
  (set! date1 (current-seconds))
  (display "MergeSort  ")
  (display (mergeSort2 lista))
  ;(newline)
  (set! date2 (current-seconds))
  (newline)
  (display "merge    ")
  (display (- date2 date1))

  (append resultados (list (- date2 date1)))

  ;BURBUJA
  (set! date1 (current-seconds))
  (display "Burbuja   ")
  (display (burbuja2 vector2))
  ;(newline)
  (set! date2 (current-seconds))
  (newline)
  (display "burbuja    ")
  (display (- date2 date1))

  (append resultados (list (- date2 date1)))

  ;QUICK SORT
  (set! date1 (current-seconds))
  (display "QuicSort     ")
  (display (QuickSort2 vector))
  ;(newline)
  (set! date2 (current-seconds))
  (newline)
  (display "QuickSort    ")
  (display (- date2 date1))

  (append resultados (list (- date2 date1)))
  
  ;SELECCION
  (set! date1 (current-seconds))
  (display "Seleccion      ")
  (display (seleccionSort2 vector2))
  (set! date2 (current-seconds))
  (newline)
  (display "seleccion    ")
  (display (- date2 date1))

  (append resultados (list (- date2 date1)))

  
  ;Muestro los resultados
  (if (= (length resultados) 0)
      (mensaje "Introduzca mas elementos")

      (and

       (open-graphics)
       (let
           (

            )
         (define ventana1 (open-viewport "Resultados de la competicion" (+ (* (length lista) 10) 500) 800 ) )
 
         (do
             (;valores del bucle
              (i 0 (+ i 1))
              (posicionenPantalla 50 (+ posicionenPantalla 24))
              )
           ;condición y sentencia de salida
           ( (= i (length resultados   ) ))

           ;cuerpo del bucle
           ( (draw-solid-rectangle ventana1) (make-posn posicionenPantalla (- 750(* 10 (list-ref resultados i))) ) 9 (* 10 (list-ref resultados i)) "green")
           ( (draw-string ventana1) (make-posn posicionenPantalla 770 ) (number->string(vector-ref (list->vector resultados) i )  )     )
           (if (= i 0)
               ( (draw-string ventana1) (make-posn posicionenPantalla 790 ) "I" )
               
               (if (= i 1)
                   ( (draw-string ventana1) (make-posn posicionenPantalla 790 ) "M" )
                   
                   (if (= i 2)
                       ( (draw-string ventana1) (make-posn posicionenPantalla 790 ) "B" )

                       (if (= i 3)
                           ( (draw-string ventana1) (make-posn posicionenPantalla 790 ) "Q" )
                           ( (draw-string ventana1) (make-posn posicionenPantalla 790 ) "S" )
                           )
                       )
                   )
               )
           )
         )
       (mensaje "Continuar...?")
       (close-graphics)
       )
      )
  )
    


  
  
  

;(competicion (vector  42 21 4 9 0 95 3 3 535 5 34 3 5 34 3 43 34 3 54 4 54 54  65 667 7 4 53 6 7 57 3 5 7  4 5 3 6 5 7 57 6 86 7 3 5 4 7 6 8 7 8 4 3 5 5 85 78 4 8 58 4 37 36 3 6 3 6363 6 4 7  36 6))