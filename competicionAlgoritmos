(require racket/vector)
;(include "trabajo")
(require (lib "graphics.ss" "graphics"))
;Aqui se guardan los algoritmos de ordenacion modificados para la competicion entre ellos

;; 
;; Nombre: mostrarVector
;; Objetivo: Función que dado un vector de números, lo muestra por pantalla de forma gráfica
;; Parámetros:
;;         vector: vector para mostrar por pantalla de forma gráfica.
;; Resultado: 
;;         Se muestra el vector
;; Funciones a las que llama: ninguna.
;;
(define (mostrarVectorCompeticion vector )
  
  (define vector2 vector)
  (open-graphics)
  (define ventana1 (open-viewport "Valores del vector" (+ (* (vector-length vector) 10) 300) 800 ) )

  ;dibujo los rectangulos
  (do
      (;valores del bucle
       (i 0 (+ i 1))
       (posicionenPantalla 50 (+ posicionenPantalla 15))
       )
    ;condición y sentencia de salida
    ( (= i (vector-length vector2)) )

    ;cuerpo del bucle
    ( (draw-solid-rectangle ventana1) (make-posn posicionenPantalla (- 750(* 10 (vector-ref vector2 i))) ) 9 (abs(* 10 (vector-ref vector2 i))) "blue")
    ( (draw-string ventana1) (make-posn posicionenPantalla 770 ) (number->string(vector-ref vector2 i )  )     )
    )

  )
;(mostrarVectorCompeticion #(1 -2 3))
;(mostrarVectorCompeticion #(1 2 3))



;; 
;; Nombre: mensaje
;; Objetivo: Función que dada una cadena la muestra por pantalla y para la ejecución del programa hasta que el usuario acepta.
;; Parámetros:
;;         m: mensaje para mostrar por pantalla.
;; Resultado: 
;;         Se muestra el mensaje y continúa la ejecución.
;; Funciones a las que llama: ninguna.
;;
(define (mensajeCompeticion m)
  (open-graphics)
  (define ventana1 (open-viewport "Mensaje" 800 180))
  ( (draw-string ventana1) (make-posn 100 30 ) m )
  ;Ahora espera hasta que el usuario hace click
  ( (draw-rectangle ventana1)  (make-posn 50 120) 100 90 "red")
  ( (draw-string ventana1)  (make-posn 50 135) "OK")

  (define click (get-mouse-click ventana1))

  (if (and (and (> (posn-x (mouse-click-posn click)) 50) (< (posn-x (mouse-click-posn click)) 100))
           (and (> (posn-y (mouse-click-posn click)) 90) (< (posn-y (mouse-click-posn click)) 120)))
      (display "Siguiente") 
      )
  
  (close-graphics)
  
  )


;;MERGE SORT

;; 
;; Nombre: mergeSort2
;; Objetivo: Función que dada una lista de números, la ordena según el método mergeSort.
;; Parámetros:
;;         lista: lista de números a ordenar.
;; Resultado: 
;;         Lista ordenada.
;; Funciones a las que llama: split y merge.
;;

;; 
;; Nombre: split
;; Objetivo: Función que reparte los elementos de una lista en dos según el criterio de mergeSort.
;; Parámetros:
;;         lista: lista de números para dividir.
;; Resultado: 
;;         Lista compuesta de dos sublistas con los elementos de la lista inicial repartidos en ellas.
;; Funciones a las que llama: Función auxiliar.
;;

;; 
;; Nombre: merge
;; Objetivo: Función que dadas dos listas, las une en una sola de forma ordenada.
;; Parámetros:
;;         lista1: lista 1 para unir.
;;         lista2: lista 2 para unir.
;; Resultado: 
;;         Lista compuesta de lista1 y lista2 con sus elementos ordenados de menor a mayor.
;; Funciones a las que llama: ninguna.
;;

(define (auxCompeticion lista listaIzquierda listaDerecha i)
  (if (= i (length lista))
      (append (list listaIzquierda) (list listaDerecha))
      (if (even? i)
          (auxCompeticion lista (append listaIzquierda (list (list-ref lista i)) ) listaDerecha (+ i 1))
          (auxCompeticion lista listaIzquierda (append listaDerecha (list (list-ref lista i)) ) (+ i 1))
          )
      )
  )

(define (splitCompeticion lista)
  (if (= (length lista) 0)
      '( () () )
      (if (= (length lista) 1)
          (list lista '()  )
          (auxCompeticion lista '() '() 0)
          )
      )
  )
;(splitCompeticion '(5 4 1 3 2))



(define (mergeCompeticion lista1 lista2)
  (if (and (= (length lista1) 0) (= (length lista2) 0))
      '()
      (if (and (= (length lista1) 0) (>= (length lista2) 1))
          (sort ( append '() lista2 )<) 
          (if (and (>= (length lista1) 1) (= (length lista2) 0))
              (sort (append lista1 '() )<)
              (sort(append lista1 lista2)<)
              )
          )
      )
  )

;(mergeCompeticion '( 1 9 3) '(4 5 6))

(define (mergeSort2 lista)
  ;primero se le hace un split
  (define listaDividida (splitCompeticion lista) )

  ;ahora se hace un merge
  (mergeCompeticion (car listaDividida) (car (cdr listaDividida))) 
  )

;(mergeSort2  '(5 4 9 3 2))
;(mergeSort2 (vector->list #(4 42 21 4 0)))





;ORDENAMIENTO POR INSERCION
;; 
;; Nombre: insertionSort
;; Objetivo: Función que dado un vector de números, lo ordena según el método de inserción. 
;; Parámetros:
;;         vector: vector de números a ordenar.
;; Resultado: 
;;         vector ordenado.
;; Funciones a las que llama: ordenarVector
;;

;; 
;; Nombre: ordenarVector
;; Objetivo: Función que ordena un vector de números. 
;; Parámetros:
;;         vector: vector con los números a ordenar.
;;         vector2: vector donde se meten los números ordenados.
;;         n: posición que ordenar de vector.
;; Resultado: 
;;         vector parcialmente ordenado.
;; Funciones a las que llama: insertar y buscarPosicion.
;;

;; 
;; Nombre: buscarPosicion
;; Objetivo: Función auxiliar que busca la posición para introducir en orden un elemento en un vector.
;; Parámetros:
;;         vector2: vector donde introducir el elemento.
;;         n: valor para introducir en vector2.
;;         i: posición de búsqueda en vector2.
;; Resultado: 
;;         Posición en la que introducir el elemento en el vector.
;; Funciones a las que llama: ninguno.
;;


;; 
;; Nombre: insertar
;; Objetivo: Función auxiliar que inserta un elemento en un vector en la posición indicada.
;; Parámetros:
;;         vector2: vector donde introducir el elemento.
;;         n: valor para introducir en vector2.
;;         i: posición en la que introducir el elmento.
;; Resultado: 
;;         vector con el valor introducido en orden
;; Funciones a las que llama: ninguno.
;;



(define (buscarPosicionCompeticion vector2 n i)
  (if (= (vector-length vector2) 0)
      0
      (if (<= n (vector-ref vector2 i)) 
          i
          (if ( <= (+ i 1) (- (vector-length vector2) 1))
              (buscarPosicionCompeticion vector2 n (+ i 1))
              (vector-length vector2) 
              )
          )
      )
  )
;(buscarPosicionCompeticion #(1 2 4 0) 3 0)

(define (insertarCompeticion i vector2 n)
  
  (if (= i 0)
      (vector-append (vector n) vector2)
      (if (= i (vector-length vector2)   )
          (vector-append vector2 (vector n) )
          (vector-append (vector-append (vector-copy vector2 0 i) (vector n)) (vector-copy vector2 i (vector-length vector2)))
          )
      )
  )

;(insertarCompeticion (buscarPosicionCompeticion #(1 2 4 0) 3 0) #(1 2 4 0) 3)
;(insertarCompeticion 0 #(1 2 4 3) 0)
;(insertarCompeticion (vector-length #(1 2 4 3))   #(1 2 4 3) 5)
        

(define (ordenarVectorCompeticion vector vector2 u)
  (if (= u (- (vector-length vector) 1))
      (insertarCompeticion (buscarPosicionCompeticion vector2 (vector-ref vector u) 0) vector2 (vector-ref vector u))
      (insertarCompeticion (buscarPosicionCompeticion vector2 (vector-ref vector u) 0 ) vector2 (vector-ref vector u ))
       
      )
  )



(define (insertionSort2Competicion vector) 
  (do
      (;definicion de variables
       (i 0 (+ i 1))
       (vector2 #() (ordenarVectorCompeticion vector vector2 i))
       )
    ;condicion y sentencia de salida
    ( (=  (vector-length vector)  (vector-length vector2)) vector2)
    )
  )

;(insertionSort2Competicion #(5 1 0 4))
;(insertionSort2Competicion #(5 1 0 4 -1))
;(insertionSort2Competicion #( 42 21 4 0 42))
;(insertionSort2Competicion (vector  42 21 4 0))
;(insertionSort2Competicion #(2 99 4 6))
;(insertionSort2Competicion (vector  42 21 4 0 95 3 3 535 5 34 3 5 34 3 43 34 3 54 4 54 54  65 667 7 4 53 6 7 57 3 5 7  4 5 3 6 5 7 57 6 86 7 3 5 4 7 6 8 7 8 4 3 5 5 85 78 4 8 58 4 37 36 3 6 3 6363 6 4 7  36 6))






;QUICK SORT
;; 
;; Nombre: QuickSortCompeticion
;; Objetivo: Función que dado un vector de números, lo ordena según el método de QuickSort. Orden descendente.
;; Parámetros:
;;         vector: vector de números a ordenar.
;; Resultado: 
;;         vector ordenado.
;; Funciones a las que llama: mostrarVector y ordenarporPivote
;;

;; 
;; Nombre: ordenarporPivote
;; Objetivo: Función que lleva a cabo la operatoria del método de ordenación Quicksort.
;; Parámetros:
;;         lista: lista de números a ordenar.
;; Resultado: 
;;         lista ordenada.
;; Funciones a las que llama: funciones auxiliares y sacarPivote
;;

;; 
;; Nombre: sacarPivote
;; Objetivo: Función que dada una lista de números, devuelve el número del medio o uno central si el número de elementos es par.
;; Parámetros:
;;         lista: lista de donde sacar el pivote.
;; Resultado: 
;;         pivote para emplearlo en QuickSort
;; Funciones a las que llama: ninguna.
;;



(define (sacarPivoteCompeticion lista)
  ;Selecciono el pivote
  (if (odd? (vector-length (list->vector lista)))
      (vector-ref (list->vector lista) (- (/ (vector-length (list->vector lista)) 2) (/ 1 2) ))
      (vector-ref (list->vector lista) (- (/ (vector-length (list->vector lista)) 2) 1) )
      )
  )

;(sacarPivoteCompeticion '(1 2 3))
;(sacarPivoteCompeticion '(1 4 3 0))


(define (auxIzquierdaCompeticion lista pivote listaOrdenada)
  (if (= (length lista) 0)
      listaOrdenada
      (if (< (car lista) pivote)
          (auxIzquierdaCompeticion (cdr lista) pivote (append listaOrdenada (list (car lista))))
          (auxIzquierdaCompeticion (cdr lista) pivote listaOrdenada)
          )
      )
  )


(define (auxDerechaCompeticion lista pivote listaOrdenada)
  (if (= (length lista) 0)
      listaOrdenada
      (if (> (car lista) pivote)
          (auxDerechaCompeticion (cdr lista) pivote (append listaOrdenada (list (car lista))))
          (auxDerechaCompeticion (cdr lista) pivote listaOrdenada)
          )
      )
  )


(define (ordenarporPivoteCompeticion lista)
  (if (<= (length lista) 1)
      lista
      (let
          (
           (pivote (sacarPivoteCompeticion lista))
           )
        (let
            (
             (listaIzquierda (auxIzquierdaCompeticion lista pivote (list)))
             (listaDerecha (auxDerechaCompeticion lista pivote (list)))
             )           
          (append (ordenarporPivoteCompeticion listaIzquierda) (list pivote) (ordenarporPivoteCompeticion listaDerecha))
          )
        )
      )
  )


(define (QuickSort2 vector)
  (list->vector (ordenarporPivoteCompeticion (vector->list vector)))
  )
 
 

;(QuickSort2Competicion #(-6 2 5 8 4 3 9 1122 424 24 2424242 0) )
;(QuickSort2Competicion (vector 4 42 21 4 0))
;(QuickSort2Competicion #(2 99 4 6 1 4 -5 56 45567 49 76 90 7 -5 73 ))






;ORDENAMIENTO POR SELECCION

;; 
;; Nombre: seleccionSortCompeticion
;; Objetivo: Función que dado un vector de números, lo ordena según el método de selección. Orden descendente
;; Parámetros:
;;         vector: vector de números a ordenar.
;; Resultado: 
;;         vector ordenado.
;; Funciones a las que llama: minimo-vector, funciones auxiliares y mostrarVector
;;

;; 
;; Nombre: minimo-vector
;; Objetivo: Función que dado un vector de números, obtiene el valor mínimo.
;; Parámetros:
;;         vector: vector de números de donde sacar el valor mínimo.
;; Resultado: 
;;         mínimo del vector
;; Funciones a las que llama: ninguna.
;;

(define (minimo-vectorCompeticion v)
  (do
      (
       (n           (-(vector-length v) 1))
       (i            1                        (+ i 1))
       (minimo (vector-ref v 0)  (if(> minimo (vector-ref v i)) (vector-ref v i) minimo))
       )
    ;; Condiciónde salida
    ((> i n) minimo)
    ;; No hay cuerpo del bucle
    )
  )



(define (seleccionSort2Competicion vector)
  (define (auxCompeticion lista minimos i)
    (if (= i (length lista) )
        (list->vector minimos)     
        (auxCompeticion lista (append minimos (list (minimo-vectorCompeticion (list->vector (remove* minimos lista ) ) ) )) (+ i 1) )
         
        )
    )
  
  ;filtro los valores repetidos, borro la segunda aparacion de estos
  (define (aux2Competicion vector)
    (define (filtradoCompeticion vectorFiltrado valor)
      (if (equal? (vector-member valor vectorFiltrado) #f); si no aparece en el vector
          (vector-append vectorFiltrado (make-vector 1 valor) )
          vectorFiltrado
          )
      )
    
    (do
        (;definicion de variables
         (i 0 (+ i 1))
         (vectorFiltrado #() (filtradoCompeticion vectorFiltrado (vector-ref vector i)))
         )
      ;condicion y sentencia de salida
      ( (= i (vector-length vector)) vectorFiltrado)
      )
                         
    )

  
  (auxCompeticion (vector->list (aux2Competicion vector)) (list) 0)
  )

;(seleccionSort2Competicion #(2 3 4 21 0 1))
;(seleccionSort2Competicion #(2 3 4 -21 0 1))
;(seleccionSort2Competicion #(2 3 4 21 0 1 3))
;(seleccionSort2Competicion #(2 3 4 2 21 0 1 3))
;(seleccionSort2Competicion #(2 3 4 2 21 0 3 1 3))
;(seleccionSort2Competicion #(2 99 4 6 1 4  56 -5 45567 49 76 90 7 -5 73 ))





;BURBUJA
;; 
;; Nombre: burbuja
;; Objetivo: Función que dado un vector de números, lo ordena según el método burbuja. Orden descendente.
;; Parámetros:
;;         vector: vector de números a ordenar.
;; Resultado: 
;;         vector ordenado.
;; Funciones a las que llama: mostrarVector, ordenado? y función auxiliar.
;;

;; 
;; Nombre: modificarVector
;; Objetivo: Función que ordena los elementos referidos del vector pasado como parámetro.
;; Parámetros:
;;         vector2: vector de números a ordenar.
;;         i: posición del vector de número a ordenar.
;; Resultado: 
;;         vertor ordenado parcialmente.
;; Funciones a las que llama: mensaje.
;;

;; 
;; Nombre: ordenado?
;; Objetivo: Predicado que comprueba si un vector está ordenado.
;; Parámetros:
;;         vector: vector de números a comprobar si está ordenado.
;; Resultado: 
;;         true o false.
;; Funciones a las que llama: ninguna.
;;


(define (modificarVectorCompeticion vector2 i) 
  (define aux 0)
  (if (not (= i (- (vector-length vector2) 1)))
      (cond
        (
         (and (> (vector-ref vector2 i) (vector-ref vector2 (+ i 1))))
     
         (set! aux (vector-ref vector2 i))
         (vector-set! vector2 i (vector-ref vector2 (+ i 1)) )
         (vector-set! vector2 (+ i 1) aux )
         )
      
        )
      ) 
  vector2
  )

;(modificarVectorCompeticion (vector 4 2 3) 0)



(define (ordenado?Competicion vector)
  (define (aux5Competicion lista)
    (if (= (length lista) 1)
        true
        (if (<= (car lista) (car (cdr lista)))
            (aux5Competicion (cdr lista))
            false
            )
        )
    )

  (aux5Competicion (vector->list vector))
  )
;(ordenado?Competicion #(2 3 41 0))
;(ordenado?Competicion #(0 1 2 3 4))




(define (burbuja2Competicion vector)
  (define (aux4Competicion vector)
    (do
        (;definicion de variables
         (i 0 (+ i 1))
         (vector2 vector (modificarVectorCompeticion vector2 i) )
         )
      ;condicion y sentencia de salida
      ( ( = i (vector-length vector)) vector)
      )
    )
  
  (define vec (aux4Competicion vector))

  (if (ordenado?Competicion vec)
      vec
      (burbuja2Competicion vec)
      )
  )

;(burbuja2 (vector 4 42 21 4 0))
;(burbuja2 (vector 2 99 4 6 1 4 -5 56 45567 49 76 90 7 -5 73 ))




;; 
;; Nombre: competicion
;; Objetivo: Función que comprueba la eficiencia de los algoritmos dado un gran vector.
;; Parámetros:
;;         vector: vector de números a comprobar si está ordenado.
;; Resultado: 
;;         Tiempo que ha tardado cada algoritmo.
;; Funciones a las que llama: insertionSort2, mergeSort2, burbuja2, quickSort2, seleccionSort2 y mostrarVector
;;

(define (competicion vector)
  ;(mostrarVector vector)
  (define lista (vector->list vector))
  (define vector2 vector)
  ;(define resultados '(4 5 3 2 9))
  (define resultados '())
  (define date1 0)
  (define date2 0)

  ;INSERCCION
  (set! date1 (current-seconds))
  (display "Inserccion   ")
  (display (insertionSort2Competicion vector2))
  ;(newline)
  (set! date2 (current-seconds))
  (display "Inserccion    ")
  (display (- date2 date1))

  (append resultados (list (- date2 date1)))

  ;MERGE SORT
  (set! date1 (current-seconds))
  (display "MergeSort  ")
  (display (mergeSort2 lista))
  ;(newline)
  (set! date2 (current-seconds))
  (newline)
  (display "merge    ")
  (display (- date2 date1))

  (append resultados (list (- date2 date1)))

  ;BURBUJA
  (set! date1 (current-seconds))
  (display "Burbuja   ")
  (display (burbuja2Competicion vector2))
  ;(newline)
  (set! date2 (current-seconds))
  (newline)
  (display "burbuja    ")
  (display (- date2 date1))

  (append resultados (list (- date2 date1)))

  ;QUICK SORT
  (set! date1 (current-seconds))
  (display "QuicSort     ")
  (display (QuickSort2 vector))
  ;(newline)
  (set! date2 (current-seconds))
  (newline)
  (display "QuickSort    ")
  (display (- date2 date1))

  (append resultados (list (- date2 date1)))
  
  ;SELECCION
  (set! date1 (current-seconds))
  (display "Seleccion      ")
  (display (seleccionSort2Competicion vector2))
  (set! date2 (current-seconds))
  (newline)
  (display "seleccion    ")
  (display (- date2 date1))

  (append resultados (list (- date2 date1)))

  
  ;Muestro los resultados
  (if (= (length resultados) 0)
      (mensajeCompeticion "Introduzca mas elementos")

      (and

       (open-graphics)
       (let
           (

            )
         (define ventana1 (open-viewport "Resultados de la competicion" (+ (* (length lista) 10) 500) 800 ) )
 
         (do
             (;valores del bucle
              (i 0 (+ i 1))
              (posicionenPantalla 50 (+ posicionenPantalla 24))
              )
           ;condición y sentencia de salida
           ( (= i (length resultados   ) ))

           ;cuerpo del bucle
           ( (draw-solid-rectangle ventana1) (make-posn posicionenPantalla (- 750(* 10 (list-ref resultados i))) ) 9 (* 10 (list-ref resultados i)) "green")
           ( (draw-string ventana1) (make-posn posicionenPantalla 770 ) (number->string(vector-ref (list->vector resultados) i )  )     )
           (if (= i 0)
               ( (draw-string ventana1) (make-posn posicionenPantalla 790 ) "I" )
               
               (if (= i 1)
                   ( (draw-string ventana1) (make-posn posicionenPantalla 790 ) "M" )
                   
                   (if (= i 2)
                       ( (draw-string ventana1) (make-posn posicionenPantalla 790 ) "B" )

                       (if (= i 3)
                           ( (draw-string ventana1) (make-posn posicionenPantalla 790 ) "Q" )
                           ( (draw-string ventana1) (make-posn posicionenPantalla 790 ) "S" )
                           )
                       )
                   )
               )
           )
         )
       (mensaje "Continuar...?")
       (close-graphics)
       )
      )
  )
    


  
  
  

;(competicion (vector  42 21 4 9 0 95 3 3 535 5 34 3 5 34 3 43 34 3 54 4 54 54  65 667 7 4 53 6 7 57 3 5 7  4 5 3 6 5 7 57 6 86 7 3 5 4 7 6 8 7 8 4 3 5 5 85 78 4 8 58 4 37 36 3 6 3 6363 6 4 7  36 6))