(require (lib "graphics.ss" "graphics"))
(require racket/vector)


(define (mostrarVector vector )
  ;paso el vector a valor absoluto
  (define vector2 vector)
  (open-graphics)
  (define ventana1 (open-viewport "Valores del vector" (+ (* (vector-length vector) 10) 100) 800 ) )

  ;dibujo los rectangulos
  (do
      (;valores del bucle
       (i 0 (+ i 1))
       (posicionenPantalla 50 (+ posicionenPantalla 15))
       )
    ;condición y sentencia de salida
    ( (= i (vector-length vector2)) )

    ;cuerpo del bucle
    ( (draw-solid-rectangle ventana1) (make-posn posicionenPantalla (- 750(* 10 (vector-ref vector2 i))) ) 9 (abs(* 10 (vector-ref vector2 i))) "blue")
    ( (draw-string ventana1) (make-posn posicionenPantalla 770 ) (number->string(vector-ref vector2 i )  )     )
    )

  )
;(mostrarVector #(1 -2 3))


(define (mensaje m)
  (open-graphics)
  (define ventana1 (open-viewport "Mensaje" 800 180))
  ( (draw-string ventana1) (make-posn 100 30 ) m )
  ;Ahora espera hasta que el usuario hace click
  ( (draw-rectangle ventana1)  (make-posn 50 120) 100 90 "red")
  ( (draw-string ventana1)  (make-posn 50 135) "OK")

  (define click (get-mouse-click ventana1))

  (if (and (and (> (posn-x (mouse-click-posn click)) 50) (< (posn-x (mouse-click-posn click)) 100))
           (and (> (posn-y (mouse-click-posn click)) 90) (< (posn-y (mouse-click-posn click)) 120)))
      (display "Siguiente") 
      )
  
  (close-graphics)
  
  )

    
  
;ALGORITMOS DE ORDENACION

;1 MERGE SORT INVERSO
(define (aux lista listaIzquierda listaDerecha i)
  (open-graphics)
  (define ventana1 (open-viewport "Split de los valores" (+ (* (length lista) 10) 500) 800 ) )
  ;muestro los valores de las listas
  
  ;LISTA IZQUIERDA
  (define (auxIzquierda listaIzquierda ventana1)
    (do
        (;valores del bucle
         (i 0 (+ i 1))
         (posicionenPantalla 50 (+ posicionenPantalla 10))
         )
      ;condición y sentencia de salida
      ( (= i (vector-length (list->vector listaIzquierda)    )) posicionenPantalla )

      ;cuerpo del bucle
      ( (draw-solid-rectangle ventana1) (make-posn posicionenPantalla (- 750(* 10 (vector-ref (list->vector listaIzquierda) i))) ) 9 (* 10 (vector-ref (list->vector listaIzquierda) i)) "blue")
      ( (draw-string ventana1) (make-posn posicionenPantalla 770 ) (number->string(vector-ref (list->vector listaIzquierda) i )  )     )
      )
    )

  (define posicionUltima (auxIzquierda listaIzquierda ventana1))


  ;LISTA DERECHA
  (do
      (;valores del bucle
       (i 0 (+ i 1))
       (posicionenPantalla (+ posicionUltima 100) (+ posicionenPantalla 10))
       )
    ;condición y sentencia de salida
    ( (= i (vector-length (list->vector listaDerecha)    )) posicionenPantalla )

    ;cuerpo del bucle
    ( (draw-solid-rectangle ventana1) (make-posn posicionenPantalla (- 750(* 10 (vector-ref (list->vector listaDerecha) i))) ) 9 (* 10 (vector-ref (list->vector listaDerecha) i)) "blue")
    ( (draw-string ventana1) (make-posn posicionenPantalla 770 ) (number->string(vector-ref (list->vector listaDerecha) i )  )     )
    )
    

  ;Ahora espera hasta que el usuario hace click
  ( (draw-rectangle ventana1)  (make-posn 35 770) 130 30 "red")
  ( (draw-string ventana1)  (make-posn 35 785) "Continuar")

  (define click (get-mouse-click ventana1))

  (if (and (and (> (posn-x (mouse-click-posn click)) 35) (< (posn-x (mouse-click-posn click)) 130))
           (and (> (posn-y (mouse-click-posn click)) 770) (< (posn-y (mouse-click-posn click)) 785)))
      (display "Siguiente") 
      )

  
  
  (if (= i (length lista))
      (append (list listaIzquierda) (list listaDerecha))
      (if (even? i)
          (aux lista (append listaIzquierda (list (list-ref lista i)) ) listaDerecha (+ i 1))
          (aux lista listaIzquierda (append listaDerecha (list (list-ref lista i)) ) (+ i 1))
          )
      )
  ;(close-graphics)
  )

(define (split lista)
  (if (= (length lista) 0)
      '( () () )
      (if (= (length lista) 1)
          (list lista '()  )
          (aux lista '() '() 0)
          )
      )
  )
;(split '(5 4 1 3 2))



(define (merge lista1 lista2)
  (if (and (= (length lista1) 0) (= (length lista2) 0))
      '() 
      (if (and (= (length lista1) 0) (<= (length lista2) 1))
          (sort ( append '() lista2 )>) 
          (if (and (<= (length lista1) 1) (= (length lista2) 0))
              (sort (append lista1 '() )>)
              (sort(append lista1 lista2)>)
              )
          )
      )
  )

;(merge '( 1 9 3) '(4 5 6))


(define (mergeSortInverso lista)
  ;primero se le hace un split
  (define listaDividida (split lista) )

  (mensaje "Ahora se unen ambos vectores")
  
  ;ahora se hace un merge
  (define a (merge (car listaDividida) (car (cdr listaDividida))))
  (mostrarVector (list->vector a))
  a
 
  )

;(mergeSortInverso  '(5 4 9 3 2))





;2 BURBUJA INVERSO
(define (modificarVector vector2 i)
  ;Muestro los candidatos a ordenar
  (open-graphics)
  (define ventana1 (open-viewport "Candidatos a ordenarse" (+ (* (vector-length vector2) 10) 100) 800 ) )

  ;dibujo los rectangulos
  (do
      (;valores del bucle
       (u 0 (+ u 1))
       (posicionenPantalla 50 (+ posicionenPantalla 15))
       )
    ;condición y sentencia de salida
    ( (= u (vector-length vector2)) )

    ;cuerpo del bucle
    (if (= u i) 
        (and
         ( (draw-solid-rectangle ventana1) (make-posn posicionenPantalla (- 750(* 10 (vector-ref vector2 u))) ) 9 (abs(* 10 (vector-ref vector2 u))) "red")
         ( (draw-string ventana1) (make-posn posicionenPantalla 770 ) (number->string(vector-ref vector2 u )  )     )
         )
        (if (= u (+ i 1)) 
            (and
             ( (draw-solid-rectangle ventana1) (make-posn posicionenPantalla (- 750(* 10 (vector-ref vector2 u))) ) 9 (abs(* 10 (vector-ref vector2 u))) "red")
             ( (draw-string ventana1) (make-posn posicionenPantalla 770 ) (number->string(vector-ref vector2 u )  )     )
             )
            (and
        
             ( (draw-solid-rectangle ventana1) (make-posn posicionenPantalla (- 750(* 10 (vector-ref vector2 u))) ) 9 (abs(* 10 (vector-ref vector2 u))) "blue")
             ( (draw-string ventana1) (make-posn posicionenPantalla 770 ) (number->string(vector-ref vector2 u )  )     )
             )
            )
        )
    )
  
  (mensaje "Continuar...?")



  (define aux 0)
  (if (not (= i (- (vector-length vector2) 1)))
      (cond
        (
         (and (< (vector-ref vector2 i) (vector-ref vector2 (+ i 1))))
     
         (set! aux (vector-ref vector2 i))
         (vector-set! vector2 i (vector-ref vector2 (+ i 1)) )
         (vector-set! vector2 (+ i 1) aux )
         )
      
        )
      )
  ;se muestra el movimiento hecho en el vector

  (open-graphics)
  (define ventana2 (open-viewport "Resultado de la ordenacion" (+ (* (vector-length vector2) 10) 100) 800 ) )

  ;dibujo los rectangulos
  (do
      (;valores del bucle
       (u 0 (+ u 1))
       (posicionenPantalla 50 (+ posicionenPantalla 15))
       )
    ;condición y sentencia de salida
    ( (= u (vector-length vector2)) )

    ;cuerpo del bucle
    (if (= u i) 
        (and
         ( (draw-solid-rectangle ventana2) (make-posn posicionenPantalla (- 750(* 10 (vector-ref vector2 u))) ) 9 (abs(* 10 (vector-ref vector2 u))) "red")
         ( (draw-string ventana2) (make-posn posicionenPantalla 770 ) (number->string(vector-ref vector2 u )  )     )
         )
        (if (= u (+ i 1)) 
            (and
             ( (draw-solid-rectangle ventana2) (make-posn posicionenPantalla (- 750(* 10 (vector-ref vector2 u))) ) 9 (abs(* 10 (vector-ref vector2 u))) "red")
             ( (draw-string ventana2) (make-posn posicionenPantalla 770 ) (number->string(vector-ref vector2 u )  )     )
             )
            (and
        
             ( (draw-solid-rectangle ventana2) (make-posn posicionenPantalla (- 750(* 10 (vector-ref vector2 u))) ) 9 (abs(* 10 (vector-ref vector2 u))) "blue")
             ( (draw-string ventana2) (make-posn posicionenPantalla 770 ) (number->string(vector-ref vector2 u )  )     )
             )
            )
        )
    )
  
  (mensaje "Continuar...?")

  
  vector2
  )

;(modificarVector (vector 4 2 3) 0)



(define (ordenado? vector)
  (define (aux5 lista)
    (if (= (length lista) 1)
        true
        (if (>= (car lista) (car (cdr lista)))
            (aux5 (cdr lista))
            false
            )
        )
    )

  (aux5 (vector->list vector))
  )
;(ordenado? #(2 3 41 0))
;(ordenado? #(0 1 2 3 4))




(define (burbujaInverso vector)

  (mensaje "Se muestra el vector antes de ordenar por burbuja")
  (mostrarVector vector)
  (mensaje "Continuar...?")


  (define (aux4 vector)
    (do
        (;definicion de variables
         (i 0 (+ i 1))
         (vector2 vector (modificarVector vector2 i) )
         )
      ;condicion y sentencia de salida
      ( ( = i (vector-length vector)) vector)
      )
    )
  
  (define vec (aux4 vector))

  (if (ordenado? vec)
      (and
       (mensaje "El vector ordenado es:")
       (mostrarVector vec)
       (mensaje "Continuar...?")
       vec
       )
      (burbujaInverso vec)
      )
       
  )

;(burbujaInverso (vector 4 2 1 3))
;(burbujaInverso (vector 4 42 21 4 0))



;3 ORDENAMIENTO POR INSERCION INVERSO
(define (buscarPosicion vector2 n i)
  (if (= (vector-length vector2) 0)
      0
      (if (>= n (vector-ref vector2 i)) 
          i
          (if ( <= (+ i 1) (- (vector-length vector2) 1))
              (buscarPosicion vector2 n (+ i 1))
              (vector-length vector2) 
              )
          )
      )
  )
;(buscarPosicion #(1 2 4 0) 3 0)

(define (insertar i vector2 n)
  
  (if (= i 0)
      (vector-append (vector n) vector2)
      (if (= i (vector-length vector2)   )
          (vector-append vector2 (vector n) )
          (vector-append (vector-append (vector-copy vector2 0 i) (vector n)) (vector-copy vector2 i (vector-length vector2)))
          )
      )
  )
;(insertar (buscarPosicion #(1 2 4 0) 3 0) #(1 2 4 0) 3)
;(insertar 0 #(1 2 4 3) 0)
;(insertar (vector-length #(1 2 4 3))   #(1 2 4 3) 5)
        

(define (ordenarVector vector vector2 u)

  ;Muestro los candidatos a ordenar
  (open-graphics)
  (define ventana1 (open-viewport "Candidatos a ordenarse" (+ (* (vector-length vector) 10) 100) 800 ) )

  ;dibujo los rectangulos
  (do
      (;valores del bucle
       (o 0 (+ o 1))
       (posicionenPantalla 50 (+ posicionenPantalla 15))
       )
    ;condición y sentencia de salida
    ( (= o (vector-length vector)) )

    ;cuerpo del bucle
    (if (= o u) 
        (and
         ( (draw-solid-rectangle ventana1) (make-posn posicionenPantalla (- 750(* 10 (vector-ref vector o))) ) 9 (abs(* 10 (vector-ref vector o))) "red")
         ( (draw-string ventana1) (make-posn posicionenPantalla 770 ) (number->string(vector-ref vector o )  )     )
         )
        (if (= o (+ u 1)) 
            (and
             ( (draw-solid-rectangle ventana1) (make-posn posicionenPantalla (- 750(* 10 (vector-ref vector o))) ) 9 (abs(* 10 (vector-ref vector o))) "red")
             ( (draw-string ventana1) (make-posn posicionenPantalla 770 ) (number->string(vector-ref vector o )  )     )
             )
            (and
        
             ( (draw-solid-rectangle ventana1) (make-posn posicionenPantalla (- 750(* 10 (vector-ref vector o))) ) 9 (abs(* 10 (vector-ref vector o))) "blue")
             ( (draw-string ventana1) (make-posn posicionenPantalla 770 ) (number->string(vector-ref vector o )  )     )
             )
            )
        )
    )
  
  (mensaje "Continuar...?")

  (if (= u (- (vector-length vector) 1))
      (and
       (mostrarVector (insertar (buscarPosicion vector2 (vector-ref vector u) 0) vector2 (vector-ref vector u)))
       (mensaje "Continuar...?")
       (insertar (buscarPosicion vector2 (vector-ref vector u) 0) vector2 (vector-ref vector u))
       )
      (and
       (mostrarVector (insertar (buscarPosicion vector2 (vector-ref vector u) 0 ) vector2 (vector-ref vector u )))
       (mensaje "Continuar...?")
       (insertar (buscarPosicion vector2 (vector-ref vector u) 0 ) vector2 (vector-ref vector u ))
       )
      )
  )



(define (insertionSortInverso vector)
  (mensaje "Se muestra el vector antes de ordenar por insercion")
  (mostrarVector vector)
  (mensaje "Continuar...?")


  
  (do
      (;definicion de variables
       (i 0 (+ i 1))
       (vector2 #() (ordenarVector vector vector2 i))
       )
    ;condicion y sentencia de salida
    ( (= i (vector-length vector))  vector2)
    )
  )

;(insertionSortInverso #(5 1 0 4))
;(insertionSortInverso #(5 1 0 4 -1))
;(insertionSortInverso #(2 99 4 6))



;4 QUICK SORT INVERSO

(define (sacarPivote lista)
  ;Selecciono el pivote
  (if (odd? (vector-length (list->vector lista)))
      (vector-ref (list->vector lista) (- (/ (vector-length (list->vector lista)) 2) (/ 1 2) ))
      (vector-ref (list->vector lista) (- (/ (vector-length (list->vector lista)) 2) 1) )
      )
  )

;(sacarPivote '(1 2 3))
;(sacarPivote '(1 4 3 0))


(define (posicionPivote lista)
  (if (odd? (vector-length (list->vector lista)))
      (- (/ (vector-length (list->vector lista)) 2) (/ 1 2) )
      (- (/ (vector-length (list->vector lista)) 2) 1) 
      )
  )
;(posicionPivote '(1 2 3))
;(posicionPivote '(1 4 3 0))




(define (auxIzquierda lista pivote listaOrdenada)
  (if (= (length lista) 0)
      listaOrdenada
      (if (> (car lista) pivote)
          (auxIzquierda (cdr lista) pivote (append listaOrdenada (list (car lista))))
          (auxIzquierda (cdr lista) pivote listaOrdenada)
          )
      )
  )


(define (auxDerecha lista pivote listaOrdenada)
  (if (= (length lista) 0)
      listaOrdenada
      (if (< (car lista) pivote)
          (auxDerecha (cdr lista) pivote (append listaOrdenada (list (car lista))))
          (auxDerecha (cdr lista) pivote listaOrdenada)
          )
      )
  )


(define (ordenarporPivote lista)
  (if (<= (length lista) 1)
      lista
      (let
          (
           (pivote (sacarPivote lista))
           )
        (let
            (
             (listaIzquierda (auxIzquierda lista pivote (list)))
             (listaDerecha (auxDerecha lista pivote (list)))
             )

             
          (mensaje "Se muestra la lista izquierda, pivote y lista derecha")


          (open-graphics)
          (define ventana1 (open-viewport "Lista izquierda, pivote y derecha" (+ (* (length lista) 10) 500) 800 ) )
          ;muestro los valores de las listas
  
          ;LISTA IZQUIERDA
          (define (auxIzquierda listaIzquierda ventana1)
            (do
                (;valores del bucle
                 (i 0 (+ i 1))
                 (posicionenPantalla 50 (+ posicionenPantalla 10))
                 )
              ;condición y sentencia de salida
              ( (= i (vector-length (list->vector listaIzquierda)    )) posicionenPantalla )

              ;cuerpo del bucle
              ( (draw-solid-rectangle ventana1) (make-posn posicionenPantalla (- 750(* 10 (abs (vector-ref (list->vector listaIzquierda) i)))) ) 9 (* 10 (abs(vector-ref (list->vector listaIzquierda) i))) "blue")
              ( (draw-string ventana1) (make-posn posicionenPantalla 770 ) (number->string(vector-ref (list->vector listaIzquierda) i )  )     )
              )
            )

          (define posicionUltima (auxIzquierda listaIzquierda ventana1))


          ;MUESTRO EL PIVOTE
       
          ( (draw-solid-rectangle ventana1) (make-posn (+ posicionUltima 45) (- 750 (* 10 (abs pivote)))) 9 (* 10 (abs pivote )) "red")
          ( (draw-string ventana1) (make-posn (+ posicionUltima 45) 770 ) (number->string pivote  )    "red" )

             


          ;LISTA DERECHA
          (do
              (;valores del bucle
               (i 0 (+ i 1))
               (posicionenPantalla (+ posicionUltima 100) (+ posicionenPantalla 10))
               )
            ;condición y sentencia de salida
            ( (= i (vector-length (list->vector listaDerecha)    )) posicionenPantalla )

            ;cuerpo del bucle
            ( (draw-solid-rectangle ventana1) (make-posn posicionenPantalla (- 750(* 10 (abs (vector-ref (list->vector listaDerecha) i)))) ) 9 (* 10 (abs (vector-ref (list->vector listaDerecha) i))) "blue")
            ( (draw-string ventana1) (make-posn posicionenPantalla 770 ) (number->string(vector-ref (list->vector listaDerecha) i )  ) "black" )
            )
    

          ;Ahora espera hasta que el usuario hace click
          ( (draw-rectangle ventana1)  (make-posn 35 770) 130 30 "red")
          ( (draw-string ventana1)  (make-posn 35 785) "Continuar" "black")

          (define click (get-mouse-click ventana1))

          (if (and (and (> (posn-x (mouse-click-posn click)) 35) (< (posn-x (mouse-click-posn click)) 130))
                   (and (> (posn-y (mouse-click-posn click)) 770) (< (posn-y (mouse-click-posn click)) 785)))
              (display "Siguiente") 
              )



             



             















             
          (append (ordenarporPivote listaIzquierda) (list pivote) (ordenarporPivote listaDerecha))
          )
        )
      )
  )


(define (QuickSortInverso vector)
  (mensaje "Se muestra el vector a ordenar por Quicksort")
  (mostrarVector vector)
  (mensaje "Continuar...?")

  (define a (list->vector (ordenarporPivote (vector->list vector))))

  (mensaje "Se muestra el vector despues de ordenar por Quicksort")
  (mostrarVector a)
  (mensaje "Continuar...?")
  a
  )
 
 

;(QuickSortInverso #(-6 2 5 8 4 3 9 1122 424 24 2424242 0) ) 


  
  
;5 ORDENAMIENTO POR SELECCION INVERSO


(define (minimo-vector v)
  (do
      (
       (n           (-(vector-length v) 1))
       (i            1                        (+ i 1))
       (minimo (vector-ref v 0)  (if(< minimo (vector-ref v i)) (vector-ref v i) minimo))
       )
    ;; Condiciónde salida
    ((> i n) minimo)
    ;; No hay cuerpo del bucle
    )
  )



(define (seleccionSortInverso vector)
  (define (aux lista minimos i)
    (open-graphics)
    (define ventana1 (open-viewport "Maximo del vector" (+ (* (vector-length vector) 10) 100) 800 ) )
    (if (= i (length lista) )
        (list->vector minimos)
        
        (and




         


         ;dibujo los rectangulos
         (do
             (;valores del bucle
              (u 0 (+ u 1))
              (posicionenPantalla 50 (+ posicionenPantalla 20))
              )
           ;condición y sentencia de salida
           ( (= u (vector-length (list->vector (remove* minimos lista )))))

           ;cuerpo del bucle
           (if (= (vector-ref (list->vector (remove* minimos lista )) u) (minimo-vector (list->vector (remove* minimos lista ) ) ) )
               (and
                ( (draw-solid-rectangle ventana1) (make-posn posicionenPantalla (- 750(* 10 (vector-ref (list->vector (remove* minimos lista )) u))) ) 9 (abs(* 10 (vector-ref (list->vector (remove* minimos lista )) u))) "red")
                ( (draw-string ventana1) (make-posn posicionenPantalla 770 ) (number->string(vector-ref (list->vector (remove* minimos lista )) u )  )     )
                )
        
               (and
        
                ( (draw-solid-rectangle ventana1) (make-posn posicionenPantalla (- 750(* 10 (vector-ref (list->vector (remove* minimos lista )) u))) ) 9 (abs(* 10 (vector-ref (list->vector (remove* minimos lista )) u))) "blue")
                ( (draw-string ventana1) (make-posn posicionenPantalla 770 ) (number->string(vector-ref (list->vector (remove* minimos lista )) u )  )     )
                )
               )
           )
    
  
         (mensaje "Continuar...?")
         (close-graphics)
         
         (mensaje "Se muestra el vector de Maximos ")
         (mostrarVector (list->vector (append minimos (list (minimo-vector (list->vector (remove* minimos lista ) ) ) ))))
         (mensaje "Continuar...?")      
        









        
         (aux lista (append minimos (list (minimo-vector (list->vector (remove* minimos lista ) ) ) )) (+ i 1) )
         )
        )
    )
  ;filtro los valores repetidos, borro la segunda aparacion de estos
  (define (aux2 vector)
    (define (filtrado vectorFiltrado valor)
      (if (equal? (vector-member valor vectorFiltrado) #f); si no aparece en el vector
          (vector-append vectorFiltrado (make-vector 1 valor) )
          vectorFiltrado
          )
      )
    
    (do
        (;definicion de variables
         (i 0 (+ i 1))
         (vectorFiltrado #() (filtrado vectorFiltrado (vector-ref vector i)))
         )
      ;condicion y sentencia de salida
      ( (= i (vector-length vector)) vectorFiltrado)
      )
                         
    )

  (mensaje "Este es el vector a ordenar por seleccion: ")
  (mostrarVector (aux2 vector))
  (mensaje "Continuar...?")

  
  (aux (vector->list (aux2 vector)) (list) 0)
  )

;(seleccionSortInverso #(2 3 4 21 0 1))
;(seleccionSortInverso #(2 3 4 -21 0 1))
;(seleccionSortInverso #(2 3 4 21 0 1 3))
;(seleccionSortInverso #(2 3 4 2 21 0 1 3))
;(seleccionSortInverso #(2 3 4 2 21 0 3 1 3))



