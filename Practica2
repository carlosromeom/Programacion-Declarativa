;EJERCICIO 3 

(define (letraDNI n)
  (case (modulo n 23)
    ( (0) "T")
    ( (1) "R")
    ( (2) "W")
    ( (3) "A")
    ( (4) "G")
    ( (5) "M")
    ( (6) "Y")
    ( (7) "F")
    ( (8) "P")
    ( (9) "D")
    ( (10) "X")
    ( (11) "B")
    ( (12) "N")
    ( (13) "J")
    ( (14) "Z")
    ( (15) "S")
    ( (16) "Q")
    ( (17) "V")
    ( (18) "H")
    ( (19) "L")
    ( (20) "C")
    ( (21) "K")
    ( (22) "E")   
  )
 )

;EJERCICIO 4
(define (posicionCircunferenciaRecta r x0 y0 A B C)
  (define (distanciaPuntoRecta x0 y0 a b c)
       (/ (abs( + (* a x0) (* b y0) c )) (sqrt (+ (* a a) (* b b)) ) )
    )
  
  (if (= r (distanciaPuntoRecta x0 y0 A B C) )
    ;(display "tangente")
      3
     (if (< r (distanciaPuntoRecta x0 y0 A B C))
     ;(display "exterior")
     1
     ;(display "secante")
     2
   
     )
   )
)

;EJERCICIO 5
(define (distanciaEuclidiana x1 y1 x2 y2)
  (sqrt (+ (* (- x2 x1) (- x2 x1) ) (* (- y2 y1) (- y2 y1) )))
)

(define (posicionRelativaDosEsferas x0 y0 r0 x1 y1 r1)
  (if ( and (= x0 x1) (= y0 y1) (= r0 r1))
      1 ; son iguales
      (if ( = (+ r0 r1) (distanciaEuclidiana x0 y0 x1 y1))
          4 ;tangentes exteriores
          (if ( = ( abs(- r0 r1)) (distanciaEuclidiana x0 y0 x1 y1))
              3; tangentes interiores
              (if ( and (= x0 x1) (= y0 y1))
                 7; concentricas
                 (if ( and (not (= x0 x1)) (not (= y0 y1))  (not (>= (+ r1 r0) (distanciaEuclidiana x0 y0 x1 y1))) )
                     6; exteriores
                      (if (and (and not(= x0 x1) (not (= y0 y1)) )  (not(<= (+ r1 r0) (distanciaEuclidiana x0 y0 x1 y1))))
                          5; interiores
                          2;secantes
                          )
                      )
                 )
              )
          )
      )
  )
 

;EJERCICIO 6
(define (distanciaEuclidiana x1 y1 x2 y2)
  (sqrt (+ (* (- x2 x1) (- x2 x1) ) (* (- y2 y1) (- y2 y1) )))
)

(define (distanciaManhattan x1 y1 x2 y2)
  (+ (abs (- x2 x1)) (abs (- y2 y1)))
)

(define (distanciaAjedrez x1 y1 x2 y2)
  (max (abs(- x2 x1) ) (abs(- y2 y1)) ) 
)

(define (posiciónPunto x y)
  (let (
        ;Declaración de variables
        (Euclidiana (distanciaEuclidiana x y -1 0))
        (Manhattan (distanciaManhattan x y 1 0))
        (Ajedrez (distanciaAjedrez x y 0 0))
        )
        ;Cuerpo del let
        (if  (or (= Euclidiana 1) (= Manhattan 1) (= Ajedrez 1))
             1
             (if (and (< Manhattan 1) (> Ajedrez 1))
                 2
                 (if (and (< Manhattan 1) (< Ajedrez 1))
                     3
                     (if (and (< Ajedrez 1) (> Manhattan 1) (> Euclidiana 1))
                         4
                         (if (and (< Ajedrez 1) (< Euclidiana 1))
                             5
                             (if (and (< Euclidiana 1) (> Ajedrez 1))
                                 6
                                 7
                                 )
                             )
                         )
                     )
                 )
             )
    )
  )    





;EJERCICIO 7
(define (propiedadTriangular? a b c)
  (if (and (< (abs (- a b)) c) ( < c (+ a b)))
      1 ;true
      0 ;false
  )
)

;EJERCICIO 8
(define (tipoTrianguloPorLados a b c)
  (if ( = (propiedadTriangular? a b c) 1)
      (if(and (= a b) (= b c))
         (begin 3 (display "Equilatero"))
         (if(and (not (= a b)) (not (= b c)))
            (begin 1 (display "Escaleno"))
            (begin 2 (display "Isósceles"))
            )
         )
      (begin 0 (display "Nulo"))
      )
)

;EJERCICIO 9
(define (cuadrado x)
  (* x x)
)

(define (anguloVectores x1 y1 x2 y2 x3 y3 x4 y4)
  ;Calculo el vector u
  (define u1 (- x2 x1))
  (define u2 (- y2 y1))
  ;calculo el vector v
  (define v1 (- x4 x3))
  (define v2 (- y4 y3))

  ;compruebo que los vectores no sean nulos:
  (if (and (= 0 u1) (= 0 u2) (= 0 v1) (= 0 v2))
      0.0
      ;calculo el angulo
      ( acos (/ (+ (* u1 v1) (* u2 v2)) (* (sqrt(+ (cuadrado u1) (cuadrado u2))) (sqrt( + (cuadrado v1) (cuadrado v2))))))
   )
  )

;EJERCICIO 10 REVISAR
(define (distanciaEuclidiana x1 y1 x2 y2)
   (sqrt (+ (* (- x2 x1) (- x2 x1) ) (* (- y2 y1) (- y2 y1) )))
)
  
(define (tipoTrianguloPorAngulos x1 y1 x2 y2 x3 y3 )

          (define ABx (- x1 x2))
          (define ABy (- y1 y2))

          ;LADO BC
          (define BCx (- x2 x3))
          (define BCy (- y2 y3))

          ;LADO CA
          (define CAx (- x3 x1))
          (define CAy (- y3 y1))

  
          (define cosA (/ (+ (* ABx CAx) (* ABy CAy)) (* (sqrt (+ (cuadrado ABx) (cuadrado ABy))) (sqrt (+ (cuadrado CAx) (cuadrado CAy))))) )
  (display cosA)
          (define cosB (/ (+ (* BCx ABx) (* BCy ABy)) (* (sqrt (+ (cuadrado BCx) (cuadrado BCy))) (sqrt (+ (cuadrado ABx) (cuadrado ABy))))) )
   (display cosB)
          (define cosC (/ (+ (* CAx BCx) (* CAy BCy)) (* (sqrt (+ (cuadrado CAx) (cuadrado CAy))) (sqrt (+ (cuadrado BCx) (cuadrado BCy))))) )
   (display cosC)
  
  ;compruebo si los lados forman un triangulo
  (let (
        ;;Variables del let
        (A (distanciaEuclidiana x1 y1 x2 y2))
        (B (distanciaEuclidiana x2 y2 x3 y3))
        (C (distanciaEuclidiana x3 y3 x1 y2))
        )
        ;;Cuerpo del let
    (if (= (propiedadTriangular? A B C) 0)
        (begin 0 (display "Los lados no forman un triangulo"))
    
    
          ;calculo los vectores de cada lado
        (begin 
          ;LADO AB
          ;(define ABx (- x1 x2))
          ;(define ABy (- y1 y2))

          ;LADO BC
          ;(define BCx (- x2 x3))
          ;(define BCy (- y2 y3))

          ;LADO CA
          ;(define CAx (- x3 x1))
          ;(define CAy (- y3 y1))

          ;Calculo el coseno de cada angulo que se corresponde con el angulo

          ;(define cosA (/ (+ (* ABx CAx) (* ABy CAy)) (* (sqrt (+ (cuadrado ABx) (cuadrado ABy))) (sqrt (+ (cuadrado CAx) (cuadrado CAy))))) )
          ;(define cosB (/ (+ (* BCx ABx) (* BCy ABy)) (* (sqrt (+ (cuadrado BCx) (cuadrado BCy))) (sqrt (+ (cuadrado ABx) (cuadrado ABy))))) )
          ;(define cosC (/ (+ (* CAx BCx) (* CAy BCy)) (* (sqrt (+ (cuadrado CAx) (cuadrado CAy))) (sqrt (+ (cuadrado BCx) (cuadrado BCy))))) )

          (if (or (= cosA 1.5708) (= cosB 1.5708) (= cosC 1.5708))
              (begin 1 (display "Recto / Rectangulo"))
              (if (and (< cosA 1.5708) (< cosB 1.5708) (< cosC 1.5708))
                  (begin 2 (display "Acutangulo"))
                  (begin 3 (display "Obtusangulo"))
                  )
              )            
          ) 
    )
  )
  )

;EJERCICIO 11
(define (ladosParalelos? x1 y1 x2 y2 x3 y3 x4 y4)
  ;Calculo los vectores de las rectas
  (define R1x (abs(- x1 x2)))
  (define R1y (abs(- y1 y2)))

  (define R2x (abs(- x3 x4)))
  (define R2y (abs(- y3 y4)))

  (if(and (= R1x R2x) (= R1y R2y))
     ;(display "Paralelas")
     1
     ;(display "no son paralelas")
     0
  )
  
)

(define (perpendiculares? x1 y1 x2 y2 x3 y3 x4 y4)
  ;Calculo los vectores de las rectas
  (define R1x (- x1 x2))
  (define R1y (- y1 y2))

  (define R2x (- x3 x4))
  (define R2y (- y3 y4))

  ;calculo el producto escalar de sus vectores
  (let (
        (productoEscalar (+ (* R1x R2x) (* R1y R2y)))
        )
    (if(= productoEscalar 0)
       1
       ;(display "Perpendiculares")
       ;(display "No son perpendiculares")
       0
       )
    )  
)

;EJERCICIO 12
(define (areaRombo a b)
  (/ (* a b) 2)
)

(define (areaRomboVertices x1 y1 x2 y2 x3 y3 x4 y4)
  (areaRombo (distanciaEuclidiana x1 y1 x3 y3) (distanciaEuclidiana x2 y2 x4 y4))
)

(define (areaRombo2 x1 y1 x2 y2 x3 y3 x4 y4)
  ;Buscamos las diagonales
  
  ;RECTA P1-P2 CON RECTA P3-P4
  (if(= (perpendiculares? x1 y1 x2 y2 x3 y3 x4 y4) 1)
     (areaRomboVertices x1 y1 x3 y3 x2 y2 x4 y4)
     ;RECTA P1-P3 CON RECTA P2-P4
     (if(= (perpendiculares? x1 y1 x3 y3 x2 y2 x4 y4) 1)
        (areaRomboVertices x1 y1 x2 y2 x3 y3 x4 y4)
        ;RECTA P2-P3 CON RECTA P1-P4
        (if(= (perpendiculares? x2 y2 x3 y3 x1 y1 x4 y4) 1)
           (areaRomboVertices x2 y2 x1 y1 x3 y3 x4 y4)
           (display "Los puntos indicados no forman un rombo")
           )
        )
     )
)

;EJERCICIO 13 RREVISAR (hay que probarlo mas)
(define (areaTrapecio a b h)
  (/ (* h (+ a b)) 2)
)

(define (distanciaPuntoRecta x0 y0 a b c)
  (/ (abs( + (* a x0) (* b y0) c )) (sqrt (+ (* a a) (* b b)) ) )
)

(define (distanciaPuntoRecta2 x0 y0 x1 y1 x2 y2)
  (let (
        (A (- y2 y1))
        (B (- x1 x2))
        (C (- (* y1 x2) (* x1 y2)))
        )
        
         (distanciaPuntoRecta x0 y0 A B C)
         
    )
)

(define (areaTrapecioLetVertices x1 y1 x2 y2 x3 y3 x4 y4)
  (let (
        (P1-P2 (distanciaEuclidiana x1 y1 x2 y2))
        (P3-P4 (distanciaEuclidiana x3 y3 x4 y4))
        (h (distanciaPuntoRecta2 x1 y1 x4 y4 x3 y3))
        )
        (areaTrapecio P1-P2 P3-P4 h)
    )
)

(define (areaTrapecio3 x1 y1 x2 y2 x3 y3 x4 y4)
  ;Buscamos las bases
  ;P1-P2 con P3-P4
  (if(= (ladosParalelos? x1 y1 x2 y2 x3 y3 x4 y4) 1)
     (areaTrapecioLetVertices x1 y1 x2 y2 x3 y3 x4 y4)
     ;P1-P3 con P2-P4
     (if(= (ladosParalelos? x1 y1 x3 y3 x2 y2 x4 y4) 1)
        (areaTrapecioLetVertices? x1 y1 x3 y3 x2 y2 x4 y4)
        ;P1-P4 con P2-P3
        (if(= (ladosParalelos? x1 y1 x4 y4 x2 y2 x3 y3) 1)
           (areaTrapecioLetVertices? x1 y1 x3 y3 x2 y2 x4 y4)
           (display "Los vertices introducidos no forman un trapecio")
           )
        )
     )
)

;EJERCICIO 14
;(define (clasificarCuadrilaterosConvexos x1 y1 x2 y2 x3 y3 x4 y4)
 ; (if(and ( = (distanciaEuclidiana x1 y1 x2 y2) (distanciaEuclidiana x2 y2 x3 y3) (distanciaEuclidiana x3 y3 x4 y4) (distancia x4 y4 x1 y2)) ( )
;)
