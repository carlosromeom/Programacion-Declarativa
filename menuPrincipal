(require racket/vector)
(include "trabajo")
(include "competicionAlgoritmos")
(include "algoritmosInversos")
(require (lib "graphics.ss" "graphics"))


;;BURBUJA

;; 
;; Nombre: rellenarVector
;; Objetivo: Función para rellenar un vector de tamaño decidido mediante la entrada por teclado del usuario, después, le aplica el algoritmo de ordenación burbuja ascendente.
;; Parámetros:
;;         button: Parámetro de la interfaz gráfica.
;;         event: Parámetro de la interfaz gráfica.
;; Resultado: 
;;         Se aplica la ordenación al vector.
;; Funciones a las que llama: funciones auxiliares, programa y burbuja.
;;

(define (rellenarVector button event)
  
  (define menu (new frame% [label "Rellenar vector"]))
  (define tamanyoVector (new text-field% [parent menu] [style (list 'single 'vertical-label)]
                             [label "Numero de elementos"] [init-value (number->string 1)]))

  (define (clickenbotonOK button event) 
    (define nuevoTamanyoVector (string->number (send tamanyoVector get-value)))
    (define aux 0)

    (define (auxRellenar nuevoTamanyoVector)
      (do
          (
           (i 0 (+ i 1))
           (vector2 (vector) (vector-append vector2 (vector aux)) )
           )
        
        ( (= i nuevoTamanyoVector) vector2  )
        (mensaje "Introduzca la componente del vector")
        (set! aux (read))
        )
      )

    (define v (auxRellenar nuevoTamanyoVector))
    (burbuja v)
      
    (send menu show #f)
    (programa)
    )
  
  (define botonOK (new button% [parent menu] [label "OK"][callback clickenbotonOK] ))
  (send menu show #t)
 
  )




;; 
;; Nombre: rellenarVectorAleatorios
;; Objetivo: Función para rellenar un vector de tamaño decidido mediante números aleatorios, después, le aplica el algoritmo de ordenación burbuja ascendente.
;; Parámetros:
;;         button: Parámetro de la interfaz gráfica.
;;         event: Parámetro de la interfaz gráfica.
;; Resultado: 
;;         Se aplica la ordenación al vector.
;; Funciones a las que llama: funciones auxiliares, programa y burbuja.
;;

(define (rellenarVectorAleatorios button event)
  
  (define menu (new frame% [label "Rellenar vector"]))
  (define tamanyoVector (new text-field% [parent menu] [style (list 'single 'vertical-label)]
                             [label "Numero de elementos"] [init-value (number->string 1)]))

  (define (clickenbotonOK button event)
    (define nuevoTamanyoVector (string->number (send tamanyoVector get-value)))

    (define (aux nuevoTamanyoVector)
      (do
          (
           (i 0 (+ i 1))
           (vector2 (vector) (vector-append vector2 (vector (inexact->exact (round (* 10 (random)))))))
           )
        ( (= i nuevoTamanyoVector) vector2)
        )
      )
    (burbuja (aux nuevoTamanyoVector))
    (send menu show #f)
    (programa)
    )
  
                  
      
  (define botonOK (new button% [parent menu] [label "OK"] [callback clickenbotonOK]))
  (send menu show #t)
  
  )

;; 
;; Nombre: cargarFichero
;; Objetivo: Función para rellenar un vector de tamaño decidido mediante la entrada por un fihcero, después, le aplica el algoritmo de ordenación burbuja ascendente.
;; Parámetros:
;;         button: Parámetro de la interfaz gráfica.
;;         event: Parámetro de la interfaz gráfica.
;; Resultado: 
;;         Se aplica la ordenación al vector.
;; Funciones a las que llama: funciones auxiliares, programa y burbuja.
;;

(define (cargarFichero button event)
  (mensaje "Introduzca el nombre del fichero (use comillas)")
  (define fichero (read))
  (if (not (file-exists? fichero))
      (mensaje "Fallo en la carga del vector")
      )
  (define puerto (open-input-file fichero))
  (define vector (read puerto))
  (if (vector? vector)
      (burbuja vector)
      (mensaje "Fallo en la carga del vector")
      )
  (programa)
  )

;; 
;; Nombre: AuxBurbujaAscendente
;; Objetivo: Función auxiliar para mostrar el menú con las opciones del algoritmo burbuja ascendente.
;; Parámetros:
;;         button: Parámetro de la interfaz gráfica.
;;         event: Parámetro de la interfaz gráfica.
;; Resultado: 
;;         Se aplica la opción elegida
;; Funciones a las que llama: funcion elegida.
;;


(define (AuxBurbujaAscendente button event)
  (define (volverMenu button event)
    (close-graphics)
    (send menu2 show #f)
    (programa)
    )
  (define menu2 (new frame% [label "Burbuja ascendente"]))
  (define boton1 (new button% [parent menu2] [label "Rellenar vector"] [callback rellenarVector]))
  (define boton2 (new button% [parent menu2] [label "Rellenar vector con valores aleatorios"] [callback rellenarVectorAleatorios]))
  (define boton3 (new button% [parent menu2] [label "Cargar desde fichero"] [callback cargarFichero]))
  (define boton4 (new button% [parent menu2] [label "Volver al menu"] [callback volverMenu]))
  (send menu2 show #t)
  )



;;MERGE SORT

;; 
;; Nombre: rellenarVectorAleatoriosMG
;; Objetivo: Función para rellenar un vector de tamaño decidido mediante números aleatorios, después, le aplica el algoritmo de ordenación Merge sort ascendente.
;; Parámetros:
;;         button: Parámetro de la interfaz gráfica.
;;         event: Parámetro de la interfaz gráfica.
;; Resultado: 
;;         Se aplica la ordenación al vector.
;; Funciones a las que llama: funciones auxiliares, programa y mergeSort.
;;
(define (rellenarVectorAleatoriosMG button event)
  
  (define menu (new frame% [label "Rellenar vector"]))
  (define tamanyoVector (new text-field% [parent menu] [style (list 'single 'vertical-label)]
                             [label "Numero de elementos"] [init-value (number->string 1)]))

  (define (clickenbotonOK button event)
    (define nuevoTamanyoVector (string->number (send tamanyoVector get-value)))
    
    (define (aux nuevoTamanyoVector)
      (do
          (
           (i 0 (+ i 1))
           (vector2 (vector) (vector-append vector2 (vector (inexact->exact (round (* 10 (random)))))))
           )
        ( (= i nuevoTamanyoVector) vector2)
        )
      )
    (define v (aux nuevoTamanyoVector))
    (mensaje "El vector a ordenar por Merge Sort es:")
    (mostrarVector v)
    (mergeSort (vector->list v))
    (send menu show #f)
    (programa)
    )
  
                  
      
  (define botonOK (new button% [parent menu] [label "OK"] [callback clickenbotonOK]))
  (send menu show #t)
  
  )


;; 
;; Nombre: cargarFicheroMG
;; Objetivo: Función para rellenar un vector de tamaño decidido mediante la entrada de un fichero, después, le aplica el algoritmo de ordenación merge sort ascendente.
;; Parámetros:
;;         button: Parámetro de la interfaz gráfica.
;;         event: Parámetro de la interfaz gráfica.
;; Resultado: 
;;         Se aplica la ordenación al vector.
;; Funciones a las que llama: funciones auxiliares, programa y mergeSort.
;;

(define (cargarFicheroMG button event)
  (mensaje "Introduzca el nombre del fichero (use comillas)")
  (define fichero (read))
  (if (not (file-exists? fichero))
      (mensaje "Fallo en la carga del vector")
      )      
  (define puerto (open-input-file fichero))
  (define vector (read puerto))
  (if (vector? vector)
      (mergeSort (vector->list vector))
      (mensaje "Fallo en la carga del vector")
      )
  (programa)
  )


;; 
;; Nombre: rellenarVectorMG
;; Objetivo: Función para rellenar un vector de tamaño decidido mediante la entrada por teclado del usuario, después, le aplica el algoritmo de ordenación merge sort ascendente.
;; Parámetros:
;;         button: Parámetro de la interfaz gráfica.
;;         event: Parámetro de la interfaz gráfica.
;; Resultado: 
;;         Se aplica la ordenación al vector.
;; Funciones a las que llama: funciones auxiliares, programa y mergeSort.
;;


(define (rellenarVectorMG button event)
  
  (define menu (new frame% [label "Rellenar vector"]))
  (define tamanyoVector (new text-field% [parent menu] [style (list 'single 'vertical-label)]
                             [label "Numero de elementos"] [init-value (number->string 1)]))

  (define (clickenbotonOK button event) 
    (define nuevoTamanyoVector (string->number (send tamanyoVector get-value)))
    (define aux 0)

    (define (auxRellenarMG nuevoTamanyoVector)
      (do
          (
           (i 0 (+ i 1))
           (vector2 (vector) (vector-append vector2 (vector aux)) )
           )
        
        ( (= i nuevoTamanyoVector) vector2  )
        (mensaje "Introduzca la componente del vector")
        (set! aux (read))
        )
      )

    (define v (auxRellenarMG nuevoTamanyoVector))
    (mensaje "El vector a ordenar por Merge Sort es:")
    (mostrarVector v)
    (mergeSort (vector->list v))
      
    (send menu show #f)
    (programa)
    )
  
  (define botonOK (new button% [parent menu] [label "OK"][callback clickenbotonOK] ))
  (send menu show #t)
 
  )



;; 
;; Nombre: AuxMergeSortAscendente
;; Objetivo: Función auxiliar para mostrar el menú con las opciones del algoritmo merge sort ascendente.
;; Parámetros:
;;         button: Parámetro de la interfaz gráfica.
;;         event: Parámetro de la interfaz gráfica.
;; Resultado: 
;;         Se aplica la opción elegida
;; Funciones a las que llama: funcion elegida.
;;

(define (AuxMergeSortAscendente button event)
  (define (volverMenu button event)
    (close-graphics)
    (send menu2 show #f)
    (programa)
    )
  (define menu2 (new frame% [label "Merge Sort ascendente"]))
  (define boton1 (new button% [parent menu2] [label "Rellenar vector"] [callback rellenarVectorMG]))
  (define boton2 (new button% [parent menu2] [label "Rellenar vector con valores aleatorios"] [callback rellenarVectorAleatoriosMG]))
  (define boton3 (new button% [parent menu2] [label "Cargar desde fichero"] [callback cargarFicheroMG]))
  (define boton4 (new button% [parent menu2] [label "Volver al menu"] [callback volverMenu]))
  (send menu2 show #t)
  )



;;QUICK SORT

;; 
;; Nombre: rellenarVectorQS
;; Objetivo: Función para rellenar un vector de tamaño decidido mediante la entrada por teclado del usuario, después, le aplica el algoritmo de ordenación quick sort ascendente.
;; Parámetros:
;;         button: Parámetro de la interfaz gráfica.
;;         event: Parámetro de la interfaz gráfica.
;; Resultado: 
;;         Se aplica la ordenación al vector.
;; Funciones a las que llama: funciones auxiliares, programa y quickSort.
;;

(define (rellenarVectorQS button event)
  
  (define menu (new frame% [label "Rellenar vector"]))
  (define tamanyoVector (new text-field% [parent menu] [style (list 'single 'vertical-label)]
                             [label "Numero de elementos"] [init-value (number->string 1)]))

  (define (clickenbotonOK button event) 
    (define nuevoTamanyoVector (string->number (send tamanyoVector get-value)))
    (define aux 0)

    (define (auxRellenarQS nuevoTamanyoVector)
      (do
          (
           (i 0 (+ i 1))
           (vector2 (vector) (vector-append vector2 (vector aux)) )
           )
        
        ( (= i nuevoTamanyoVector) vector2  )
        (mensaje "Introduzca la componente del vector")
        (set! aux (read))
        )
      )

    (define v (auxRellenarQS nuevoTamanyoVector))
    (mensaje "El vector a ordenar por Quick Sort es:")
    (mostrarVector v)
    (QuickSort v)
      
    (send menu show #f)
    (programa)
    )
  
  (define botonOK (new button% [parent menu] [label "OK"][callback clickenbotonOK] ))
  (send menu show #t)
 
  )



;; 
;; Nombre: rellenarVectorAleatorioQS
;; Objetivo: Función para rellenar un vector de tamaño decidido mediante valores aleatorios, después, le aplica el algoritmo de ordenación quick sort ascendente.
;; Parámetros:
;;         button: Parámetro de la interfaz gráfica.
;;         event: Parámetro de la interfaz gráfica.
;; Resultado: 
;;         Se aplica la ordenación al vector.
;; Funciones a las que llama: funciones auxiliares, programa y quickSort.
;;

(define (rellenarVectorAleatoriosQS button event)
  
  (define menu (new frame% [label "Rellenar vector"]))
  (define tamanyoVector (new text-field% [parent menu] [style (list 'single 'vertical-label)]
                             [label "Numero de elementos"] [init-value (number->string 1)]))

  (define (clickenbotonOK button event)
    (define nuevoTamanyoVector (string->number (send tamanyoVector get-value)))
    
    (define (aux nuevoTamanyoVector)
      (do
          (
           (i 0 (+ i 1))
           (vector2 (vector) (vector-append vector2 (vector (inexact->exact (round (* 10 (random)))))))
           )
        ( (= i nuevoTamanyoVector) vector2)
        )
      )
    (define v (aux nuevoTamanyoVector))
    (QuickSort v)
    (send menu show #f)
    (programa)
    )
  
                  
      
  (define botonOK (new button% [parent menu] [label "OK"] [callback clickenbotonOK]))
  (send menu show #t)
  
  )



;; 
;; Nombre: cargarFicheroQS
;; Objetivo: Función para rellenar un vector de tamaño decidido mediante la entrada de un fichero, después, le aplica el algoritmo de ordenación quick sort ascendente.
;; Parámetros:
;;         button: Parámetro de la interfaz gráfica.
;;         event: Parámetro de la interfaz gráfica.
;; Resultado: 
;;         Se aplica la ordenación al vector.
;; Funciones a las que llama: funciones auxiliares, programa y quickSort.
;;

(define (cargarFicheroQS button event)
  (mensaje "Introduzca el nombre del fichero (use comillas)")
  (define fichero (read))
  (if (not (file-exists? fichero))
      (mensaje "Fallo en la carga del vector")
      )      
  (define puerto (open-input-file fichero))
  (define vector (read puerto))
  (if (vector? vector)
      (QuickSort vector)
      (mensaje "Fallo en la carga del vector")
      )
  (programa)
  )



;; 
;; Nombre: AuxQuickSortAscendente
;; Objetivo: Función auxiliar para mostrar el menú con las opciones del algoritmo quick sort ascendente.
;; Parámetros:
;;         button: Parámetro de la interfaz gráfica.
;;         event: Parámetro de la interfaz gráfica.
;; Resultado: 
;;         Se aplica la opción elegida
;; Funciones a las que llama: funcion elegida.
;;

(define (AuxQuickSortAscendente button event)
  (define (volverMenu button event)
    (close-graphics)
    (send menu2 show #f)
    (programa)
    )
  (define menu2 (new frame% [label "Quick Sort ascendente"]))
  (define boton1 (new button% [parent menu2] [label "Rellenar vector"] [callback rellenarVectorQS]))
  (define boton2 (new button% [parent menu2] [label "Rellenar vector con valores aleatorios"] [callback rellenarVectorAleatoriosQS]))
  (define boton3 (new button% [parent menu2] [label "Cargar desde fichero"] [callback cargarFicheroQS]))
  (define boton4 (new button% [parent menu2] [label "Volver al menu"] [callback volverMenu]))
  (send menu2 show #t)
  )

;;SELECCION

;; 
;; Nombre: rellenarVectorS
;; Objetivo: Función para rellenar un vector de tamaño decidido mediante la entrada de usuario, después, le aplica el algoritmo de ordenación por selección ascendente.
;; Parámetros:
;;         button: Parámetro de la interfaz gráfica.
;;         event: Parámetro de la interfaz gráfica.
;; Resultado: 
;;         Se aplica la ordenación al vector.
;; Funciones a las que llama: funciones auxiliares, programa y seleccionSort.
;;

(define (rellenarVectorS button event)
  
  (define menu (new frame% [label "Rellenar vector"]))
  (define tamanyoVector (new text-field% [parent menu] [style (list 'single 'vertical-label)]
                             [label "Numero de elementos"] [init-value (number->string 1)]))

  (define (clickenbotonOK button event) 
    (define nuevoTamanyoVector (string->number (send tamanyoVector get-value)))
    (define aux 0)

    (define (auxRellenarS nuevoTamanyoVector)
      (do
          (
           (i 0 (+ i 1))
           (vector2 (vector) (vector-append vector2 (vector aux)) )
           )
        
        ( (= i nuevoTamanyoVector) vector2  )
        (mensaje "Introduzca la componente del vector")
        (set! aux (read))
        )
      )

    (define v (auxRellenarS nuevoTamanyoVector))
    (mensaje "El vector a ordenar por Seleccion es:")
    (mostrarVector v)
    (seleccionSort v)
      
    (send menu show #f)
    (programa)
    )
  
  (define botonOK (new button% [parent menu] [label "OK"][callback clickenbotonOK] ))
  (send menu show #t)
 
  )


;; 
;; Nombre: rellenarVectorAleatoriosS
;; Objetivo: Función para rellenar un vector de tamaño decidido mediante valores aleatorios, después, le aplica el algoritmo de ordenación por selección ascendente.
;; Parámetros:
;;         button: Parámetro de la interfaz gráfica.
;;         event: Parámetro de la interfaz gráfica.
;; Resultado: 
;;         Se aplica la ordenación al vector.
;; Funciones a las que llama: funciones auxiliares, programa y seleccionSort.
;;

(define (rellenarVectorAleatoriosS button event)
  
  (define menu (new frame% [label "Rellenar vector"]))
  (define tamanyoVector (new text-field% [parent menu] [style (list 'single 'vertical-label)]
                             [label "Numero de elementos"] [init-value (number->string 1)]))

  (define (clickenbotonOK button event)
    (define nuevoTamanyoVector (string->number (send tamanyoVector get-value)))
    
    (define (aux nuevoTamanyoVector)
      (do
          (
           (i 0 (+ i 1))
           (vector2 (vector) (vector-append vector2 (vector (inexact->exact (round (* 10 (random)))))))
           )
        ( (= i nuevoTamanyoVector) vector2)
        )
      )
    (define v (aux nuevoTamanyoVector))
    (seleccionSort v)
    (send menu show #f)
    (programa)
    )
  
                  
      
  (define botonOK (new button% [parent menu] [label "OK"] [callback clickenbotonOK]))
  (send menu show #t)
  
  )



;; 
;; Nombre: cargarFicheroS
;; Objetivo: Función para rellenar un vector de tamaño decidido mediante la entrada de fichero, después, le aplica el algoritmo de ordenación por selección ascendente.
;; Parámetros:
;;         button: Parámetro de la interfaz gráfica.
;;         event: Parámetro de la interfaz gráfica.
;; Resultado: 
;;         Se aplica la ordenación al vector.
;; Funciones a las que llama: funciones auxiliares, programa y seleccionSort.
;;
(define (cargarFicheroS button event)
  (mensaje "Introduzca el nombre del fichero (use comillas)")
  (define fichero (read))
  (if (not (file-exists? fichero))
      (mensaje "Fallo en la carga del vector")
      )      
  (define puerto (open-input-file fichero))
  (define vector (read puerto))
  (if (vector? vector)
      (seleccionSort vector)
      (mensaje "Fallo en la carga del vector")
      )
  (programa)
  )


;; 
;; Nombre: AuxSeleccionAscendente
;; Objetivo: Función auxiliar para mostrar el menú con las opciones del algoritmo de ordenación por selección ascendente.
;; Parámetros:
;;         button: Parámetro de la interfaz gráfica.
;;         event: Parámetro de la interfaz gráfica.
;; Resultado: 
;;         Se aplica la opción elegida
;; Funciones a las que llama: funcion elegida.
;;

(define (AuxSeleccionAscendente button event)
  (define (volverMenu button event)
    (close-graphics)
    (send menu2 show #f)
    (programa)
    )
  (define menu2 (new frame% [label "Seleccion ascendente"]))
  (define boton1 (new button% [parent menu2] [label "Rellenar vector"] [callback rellenarVectorS]))
  (define boton2 (new button% [parent menu2] [label "Rellenar vector con valores aleatorios"] [callback rellenarVectorAleatoriosS]))
  (define boton3 (new button% [parent menu2] [label "Cargar desde fichero"] [callback cargarFicheroS]))
  (define boton4 (new button% [parent menu2] [label "Volver al menu"] [callback volverMenu]))
  (send menu2 show #t)
  )


;;INSERCCION

;; 
;; Nombre: rellenarVectorI
;; Objetivo: Función para rellenar un vector de tamaño decidido mediante la entrada de usuario, después, le aplica el algoritmo de ordenación por inserción ascendente.
;; Parámetros:
;;         button: Parámetro de la interfaz gráfica.
;;         event: Parámetro de la interfaz gráfica.
;; Resultado: 
;;         Se aplica la ordenación al vector.
;; Funciones a las que llama: funciones auxiliares, programa y insertionSort.
;;
(define (rellenarVectorI button event)
  
  (define menu (new frame% [label "Rellenar vector"]))
  (define tamanyoVector (new text-field% [parent menu] [style (list 'single 'vertical-label)]
                             [label "Numero de elementos"] [init-value (number->string 1)]))

  (define (clickenbotonOK button event) 
    (define nuevoTamanyoVector (string->number (send tamanyoVector get-value)))
    (define aux 0)

    (define (auxRellenarI nuevoTamanyoVector)
      (do
          (
           (i 0 (+ i 1))
           (vector2 (vector) (vector-append vector2 (vector aux)) )
           )
        
        ( (= i nuevoTamanyoVector) vector2  )
        (mensaje "Introduzca la componente del vector")
        (set! aux (read))
        )
      )

    (define v (auxRellenarI nuevoTamanyoVector))
    (insertionSort v)
      
    (send menu show #f)
    (programa)
    )
  
  (define botonOK (new button% [parent menu] [label "OK"][callback clickenbotonOK] ))
  (send menu show #t)
 
  )



;; 
;; Nombre: rellenarVectorAleatoriosI
;; Objetivo: Función para rellenar un vector de tamaño decidido mediante valores aleatorios, después, le aplica el algoritmo de ordenación por inserción ascendente.
;; Parámetros:
;;         button: Parámetro de la interfaz gráfica.
;;         event: Parámetro de la interfaz gráfica.
;; Resultado: 
;;         Se aplica la ordenación al vector.
;; Funciones a las que llama: funciones auxiliares, programa y insertionSort.
;;

(define (rellenarVectorAleatoriosI button event)
  
  (define menu (new frame% [label "Rellenar vector"]))
  (define tamanyoVector (new text-field% [parent menu] [style (list 'single 'vertical-label)]
                             [label "Numero de elementos"] [init-value (number->string 1)]))

  (define (clickenbotonOK button event)
    (define nuevoTamanyoVector (string->number (send tamanyoVector get-value)))
    
    (define (aux nuevoTamanyoVector)
      (do
          (
           (i 0 (+ i 1))
           (vector2 (vector) (vector-append vector2 (vector (inexact->exact (round (* 10 (random)))))))
           )
        ( (= i nuevoTamanyoVector) vector2)
        )
      )
    (define v (aux nuevoTamanyoVector))
    (insertionSort v)
    (send menu show #f)
    (programa)
    )
  
                  
      
  (define botonOK (new button% [parent menu] [label "OK"] [callback clickenbotonOK]))
  (send menu show #t)
  
  )



;; 
;; Nombre: cargarFicheroI
;; Objetivo: Función para rellenar un vector de tamaño decidido mediante la entrada de fichero, después, le aplica el algoritmo de ordenación por inserción ascendente.
;; Parámetros:
;;         button: Parámetro de la interfaz gráfica.
;;         event: Parámetro de la interfaz gráfica.
;; Resultado: 
;;         Se aplica la ordenación al vector.
;; Funciones a las que llama: funciones auxiliares, programa y insertionSort.
;;

(define (cargarFicheroI button event)
  (mensaje "Introduzca el nombre del fichero (use comillas)")
  (define fichero (read))
  (if (not (file-exists? fichero))
      (mensaje "Fallo en la carga del vector")
      )      
  (define puerto (open-input-file fichero))
  (define vector (read puerto))
  (if (vector? vector)
      (insertionSort vector)
      (mensaje "Fallo en la carga del vector")
      )
  (programa)
  )




;; 
;; Nombre: AuxInserccionAscendente
;; Objetivo: Función auxiliar para mostrar el menú con las opciones del algoritmo de ordenación por insercción ascendente.
;; Parámetros:
;;         button: Parámetro de la interfaz gráfica.
;;         event: Parámetro de la interfaz gráfica.
;; Resultado: 
;;         Se aplica la opción elegida
;; Funciones a las que llama: funcion elegida.
;;

(define (AuxInserccionAscendente button event)
  (define (volverMenu button event)
    (close-graphics)
    (send menu2 show #f)
    (programa)
    )
  (define menu2 (new frame% [label "Inserccion ascendente"]))
  (define boton1 (new button% [parent menu2] [label "Rellenar vector"] [callback rellenarVectorI]))
  (define boton2 (new button% [parent menu2] [label "Rellenar vector con valores aleatorios"] [callback rellenarVectorAleatoriosI]))
  (define boton3 (new button% [parent menu2] [label "Cargar desde fichero"] [callback cargarFicheroI]))
  (define boton4 (new button% [parent menu2] [label "Volver al menu"] [callback volverMenu]))
  (send menu2 show #t)
  )

;;COMPETICION DE ALGORITMOS

;; 
;; Nombre: AuxCompeticion
;; Objetivo: Función auxiliar para mostrar el menú con las opciones de competición de los algoritmos.
;; Parámetros:
;;         button: Parámetro de la interfaz gráfica.
;;         event: Parámetro de la interfaz gráfica.
;; Resultado: 
;;         Se aplica la opción elegida
;; Funciones a las que llama: funcion elegida.
;;

(define (AuxCompeticion button event)
  
  (define menu (new frame% [label "Rellenar vector"]))
  (define tamanyoVector (new text-field% [parent menu] [style (list 'single 'vertical-label)]
                             [label "Numero de elementos (se recomienda introducir muchos)"] [init-value (number->string 1)]))

  (define (clickenbotonOK button event)
    (define nuevoTamanyoVector (string->number (send tamanyoVector get-value)))
    
    (define (aux nuevoTamanyoVector)
      (do
          (
           (i 0 (+ i 1))
           (vector2 (vector) (vector-append vector2 (vector (* 10 (random)))))
           )
        ( (= i nuevoTamanyoVector) vector2)
        )
      )
    
    (define v (aux nuevoTamanyoVector))
    (competicion v)
    (send menu show #f)
    (programa)
    )
  
                  
      
  (define botonOK (new button% [parent menu] [label "OK"] [callback clickenbotonOK]))
  (send menu show #t)
  
  )


;; BURBUJA DESCENDENTE

;; 
;; Nombre: rellenarVectorBurbujaDescendente
;; Objetivo: Función para rellenar un vector de tamaño decidido mediante la entrada de usuario, después, le aplica el algoritmo de ordenación burbuja descendente.
;; Parámetros:
;;         button: Parámetro de la interfaz gráfica.
;;         event: Parámetro de la interfaz gráfica.
;; Resultado: 
;;         Se aplica la ordenación al vector.
;; Funciones a las que llama: funciones auxiliares, programa y burbujaInverso.
;;

(define (rellenarVectorBurbujaDescendente button event)
  
  (define menu (new frame% [label "Rellenar vector"]))
  (define tamanyoVector (new text-field% [parent menu] [style (list 'single 'vertical-label)]
                             [label "Numero de elementos"] [init-value (number->string 1)]))

  (define (clickenbotonOK button event) 
    (define nuevoTamanyoVector (string->number (send tamanyoVector get-value)))
    (define aux 0)

    (define (auxRellenarBurbujaDescendente nuevoTamanyoVector)
      (do
          (
           (i 0 (+ i 1))
           (vector2 (vector) (vector-append vector2 (vector aux)) )
           )
        
        ( (= i nuevoTamanyoVector) vector2  )
        (mensaje "Introduzca la componente del vector")
        (set! aux (read))
        )
      )

    (define v (auxRellenarBurbujaDescendente nuevoTamanyoVector))
    (burbujaInverso v)
      
    (send menu show #f)
    (programa)
    )
  
  (define botonOK (new button% [parent menu] [label "OK"][callback clickenbotonOK] ))
  (send menu show #t)
 
  )


;; 
;; Nombre: rellenarVectorAleatoriosBurbujaDescendente
;; Objetivo: Función para rellenar un vector de tamaño decidido mediante valores aleatorios, después, le aplica el algoritmo de ordenación burbuja descendente.
;; Parámetros:
;;         button: Parámetro de la interfaz gráfica.
;;         event: Parámetro de la interfaz gráfica.
;; Resultado: 
;;         Se aplica la ordenación al vector.
;; Funciones a las que llama: funciones auxiliares, programa y burbujaInverso.
;;

(define (rellenarVectorAleatoriosBurbujaDescendente button event)
  
  (define menu (new frame% [label "Rellenar vector"]))
  (define tamanyoVector (new text-field% [parent menu] [style (list 'single 'vertical-label)]
                             [label "Numero de elementos"] [init-value (number->string 1)]))

  (define (clickenbotonOK button event)
    (define nuevoTamanyoVector (string->number (send tamanyoVector get-value)))
    
    (define (aux nuevoTamanyoVector)
      (do
          (
           (i 0 (+ i 1))
           (vector2 (vector) (vector-append vector2 (vector (inexact->exact (round (* 10 (random)))))))
           )
        ( (= i nuevoTamanyoVector) vector2)
        )
      )
    (define v (aux nuevoTamanyoVector))
    (burbujaInverso v)
    (send menu show #f)
    (programa)
    )
  
                  
      
  (define botonOK (new button% [parent menu] [label "OK"] [callback clickenbotonOK]))
  (send menu show #t)
  
  )


;; 
;; Nombre: cargarFicheroBurbujaDescendente
;; Objetivo: Función para rellenar un vector de tamaño decidido mediante la entrada de fichero, después, le aplica el algoritmo de ordenación burbuja descendente.
;; Parámetros:
;;         button: Parámetro de la interfaz gráfica.
;;         event: Parámetro de la interfaz gráfica.
;; Resultado: 
;;         Se aplica la ordenación al vector.
;; Funciones a las que llama: funciones auxiliares, programa y burbujaInverso.
;;

(define (cargarFicheroBurbujaDescendente button event)
  (mensaje "Introduzca el nombre del fichero (use comillas)")
  (define fichero (read))
  (if (not (file-exists? fichero))
      (mensaje "Fallo en la carga del vector")
      )      
  (define puerto (open-input-file fichero))
  (define vector (read puerto))
  (if (vector? vector)
      (burbujaInverso vector)
      (mensaje "Fallo en la carga del vector")
      )
  (programa)
  )


;; 
;; Nombre: AuxBurbujaDescendente
;; Objetivo: Función auxiliar para mostrar el menú con las opciones del algoritmo de ordenación burbuja descendente.
;; Parámetros:
;;         button: Parámetro de la interfaz gráfica.
;;         event: Parámetro de la interfaz gráfica.
;; Resultado: 
;;         Se aplica la opción elegida
;; Funciones a las que llama: funcion elegida.
;;

(define (AuxBurbujaDescendente button event)
  (define (volverMenu button event)
    (close-graphics)
    (send menu2 show #f)
    (programa)
    )
  (define menu2 (new frame% [label "Burbuja descendente"]))
  (define boton1 (new button% [parent menu2] [label "Rellenar vector"] [callback rellenarVectorBurbujaDescendente]))
  (define boton2 (new button% [parent menu2] [label "Rellenar vector con valores aleatorios"] [callback rellenarVectorAleatoriosBurbujaDescendente]))
  (define boton3 (new button% [parent menu2] [label "Cargar desde fichero"] [callback cargarFicheroBurbujaDescendente]))
  (define boton4 (new button% [parent menu2] [label "Volver al menu"] [callback volverMenu]))
  (send menu2 show #t)
  )

;;MERGE SORT DESCENDENTE

;; 
;; Nombre: rellenarVectorAleatoriosMGDescendente
;; Objetivo: Función para rellenar un vector de tamaño decidido mediante valores aleatorios, después, le aplica el algoritmo de ordenación merge sort descendente.
;; Parámetros:
;;         button: Parámetro de la interfaz gráfica.
;;         event: Parámetro de la interfaz gráfica.
;; Resultado: 
;;         Se aplica la ordenación al vector.
;; Funciones a las que llama: funciones auxiliares, programa y mergeSortInverso.
;;

(define (rellenarVectorAleatoriosMGDescendente button event)
  
  (define menu (new frame% [label "Rellenar vector"]))
  (define tamanyoVector (new text-field% [parent menu] [style (list 'single 'vertical-label)]
                             [label "Numero de elementos"] [init-value (number->string 1)]))

  (define (clickenbotonOK button event)
    (define nuevoTamanyoVector (string->number (send tamanyoVector get-value)))
    
    (define (aux nuevoTamanyoVector)
      (do
          (
           (i 0 (+ i 1))
           (vector2 (vector) (vector-append vector2 (vector (inexact->exact (round (* 10 (random)))))))
           )
        ( (= i nuevoTamanyoVector) vector2)
        )
      )
    (define v (aux nuevoTamanyoVector))
    (mensaje "El vector a ordenar por Merge Sort es:")
    (mostrarVector v)
    (mergeSortInverso (vector->list v))
    (send menu show #f)
    (programa)
    )
  
                  
      
  (define botonOK (new button% [parent menu] [label "OK"] [callback clickenbotonOK]))
  (send menu show #t)
  
  )


;; 
;; Nombre: cargarFicheroMGDescendente
;; Objetivo: Función para rellenar un vector de tamaño decidido mediante la entrada de fichero, después, le aplica el algoritmo de ordenación merge sort descendente.
;; Parámetros:
;;         button: Parámetro de la interfaz gráfica.
;;         event: Parámetro de la interfaz gráfica.
;; Resultado: 
;;         Se aplica la ordenación al vector.
;; Funciones a las que llama: funciones auxiliares, programa y mergeSortInverso.
;;


(define (cargarFicheroMGDescendente button event)
  (mensaje "Introduzca el nombre del fichero (use comillas)")
  (define fichero (read))
  (if (not (file-exists? fichero))
      (mensaje "Fallo en la carga del vector")
      )      
  (define puerto (open-input-file fichero))
  (define vector (read puerto))
  (if (vector? vector)
      (mergeSortInverso (vector->list vector))
      (mensaje "Fallo en la carga del vector")
      )
  (programa)
  )


;; 
;; Nombre: rellenarVectorMGDescendente
;; Objetivo: Función para rellenar un vector de tamaño decidido mediante la entrada de usuario, después, le aplica el algoritmo de ordenación merge sort descendente.
;; Parámetros:
;;         button: Parámetro de la interfaz gráfica.
;;         event: Parámetro de la interfaz gráfica.
;; Resultado: 
;;         Se aplica la ordenación al vector.
;; Funciones a las que llama: funciones auxiliares, programa y mergeSortInverso.
;;

(define (rellenarVectorMGDescendente button event)
  
  (define menu (new frame% [label "Rellenar vector"]))
  (define tamanyoVector (new text-field% [parent menu] [style (list 'single 'vertical-label)]
                             [label "Numero de elementos"] [init-value (number->string 1)]))

  (define (clickenbotonOK button event) 
    (define nuevoTamanyoVector (string->number (send tamanyoVector get-value)))
    (define aux 0)

    (define (auxRellenarMG nuevoTamanyoVector)
      (do
          (
           (i 0 (+ i 1))
           (vector2 (vector) (vector-append vector2 (vector aux)) )
           )
        
        ( (= i nuevoTamanyoVector) vector2  )
        (mensaje "Introduzca la componente del vector")
        (set! aux (read))
        )
      )

    (define v (auxRellenarMG nuevoTamanyoVector))
    (mensaje "El vector a ordenar por Merge Sort es:")
    (mostrarVector v)
    (mergeSortInverso (vector->list v))
      
    (send menu show #f)
    (programa)
    )
  
  (define botonOK (new button% [parent menu] [label "OK"][callback clickenbotonOK] ))
  (send menu show #t)
 
  )


;; 
;; Nombre: AuxMergeSortDescendente
;; Objetivo: Función auxiliar para mostrar el menú con las opciones del algoritmo de ordenación merge sort descendente.
;; Parámetros:
;;         button: Parámetro de la interfaz gráfica.
;;         event: Parámetro de la interfaz gráfica.
;; Resultado: 
;;         Se aplica la opción elegida
;; Funciones a las que llama: funcion elegida.
;;


(define (AuxMergeSortDescendente button event)
  (define (volverMenu button event)
    (close-graphics)
    (send menu2 show #f)
    (programa)
    )
  (define menu2 (new frame% [label "Merge Sort descendente"]))
  (define boton1 (new button% [parent menu2] [label "Rellenar vector"] [callback rellenarVectorMGDescendente]))
  (define boton2 (new button% [parent menu2] [label "Rellenar vector con valores aleatorios"] [callback rellenarVectorAleatoriosMGDescendente]))
  (define boton3 (new button% [parent menu2] [label "Cargar desde fichero"] [callback cargarFicheroMGDescendente]))
  (define boton4 (new button% [parent menu2] [label "Volver al menu"] [callback volverMenu]))
  (send menu2 show #t)
  )



;;QUICK SORT DESCENDENTE

;; 
;; Nombre: rellenarVectorQSDescendente
;; Objetivo: Función para rellenar un vector de tamaño decidido mediante la entrada de usuario, después, le aplica el algoritmo de ordenación quick sort descendente.
;; Parámetros:
;;         button: Parámetro de la interfaz gráfica.
;;         event: Parámetro de la interfaz gráfica.
;; Resultado: 
;;         Se aplica la ordenación al vector.
;; Funciones a las que llama: funciones auxiliares, programa y QuickSortInverso.
;;

(define (rellenarVectorQSDescendente button event)
  
  (define menu (new frame% [label "Rellenar vector"]))
  (define tamanyoVector (new text-field% [parent menu] [style (list 'single 'vertical-label)]
                             [label "Numero de elementos"] [init-value (number->string 1)]))

  (define (clickenbotonOK button event) 
    (define nuevoTamanyoVector (string->number (send tamanyoVector get-value)))
    (define aux 0)

    (define (auxRellenarQS nuevoTamanyoVector)
      (do
          (
           (i 0 (+ i 1))
           (vector2 (vector) (vector-append vector2 (vector aux)) )
           )
        
        ( (= i nuevoTamanyoVector) vector2  )
        (mensaje "Introduzca la componente del vector")
        (set! aux (read))
        )
      )

    (define v (auxRellenarQS nuevoTamanyoVector))
    (mensaje "El vector a ordenar por Quick Sort es:")
    (mostrarVector v)
    (QuickSortInverso v)
      
    (send menu show #f)
    (programa)
    )
  
  (define botonOK (new button% [parent menu] [label "OK"][callback clickenbotonOK] ))
  (send menu show #t)
 
  )


;; 
;; Nombre: rellenarVectorAleatoriosQSDescendente
;; Objetivo: Función para rellenar un vector de tamaño decidido mediante valores aleatorios, después, le aplica el algoritmo de ordenación quick sort descendente.
;; Parámetros:
;;         button: Parámetro de la interfaz gráfica.
;;         event: Parámetro de la interfaz gráfica.
;; Resultado: 
;;         Se aplica la ordenación al vector.
;; Funciones a las que llama: funciones auxiliares, programa y QuickSortInverso.
;;


(define (rellenarVectorAleatoriosQSDescendente button event)
  
  (define menu (new frame% [label "Rellenar vector"]))
  (define tamanyoVector (new text-field% [parent menu] [style (list 'single 'vertical-label)]
                             [label "Numero de elementos"] [init-value (number->string 1)]))

  (define (clickenbotonOK button event)
    (define nuevoTamanyoVector (string->number (send tamanyoVector get-value)))
    
    (define (aux nuevoTamanyoVector)
      (do
          (
           (i 0 (+ i 1))
           (vector2 (vector) (vector-append vector2 (vector (inexact->exact (round (* 10 (random)))))))
           )
        ( (= i nuevoTamanyoVector) vector2)
        )
      )
    (define v (aux nuevoTamanyoVector))
    (QuickSortInverso v)
    (send menu show #f)
    (programa)
    )
  
                  
      
  (define botonOK (new button% [parent menu] [label "OK"] [callback clickenbotonOK]))
  (send menu show #t)
  
  )


;; 
;; Nombre: cargarFicheroQSDescendente
;; Objetivo: Función para rellenar un vector de tamaño decidido mediante entrada de fichero, después, le aplica el algoritmo de ordenación quick sort descendente.
;; Parámetros:
;;         button: Parámetro de la interfaz gráfica.
;;         event: Parámetro de la interfaz gráfica.
;; Resultado: 
;;         Se aplica la ordenación al vector.
;; Funciones a las que llama: funciones auxiliares, programa y QuickSortInverso.
;;



(define (cargarFicheroQSDescendente button event)
  (mensaje "Introduzca el nombre del fichero (use comillas)")
  (define fichero (read))
  (if (not (file-exists? fichero))
      (mensaje "Fallo en la carga del vector")
      )      
  (define puerto (open-input-file fichero))
  (define vector (read puerto))
  (if (vector? vector)
      (QuickSortInverso vector)
      (mensaje "Fallo en la carga del vector")
      )
  (programa)
  )



;; 
;; Nombre: AuxQuickSortDescendente
;; Objetivo: Función auxiliar para mostrar el menú con las opciones del algoritmo de ordenación quick sort descendente.
;; Parámetros:
;;         button: Parámetro de la interfaz gráfica.
;;         event: Parámetro de la interfaz gráfica.
;; Resultado: 
;;         Se aplica la opción elegida
;; Funciones a las que llama: funcion elegida.
;;


(define (AuxQuickSortDescendente button event)
  (define (volverMenu button event)
    (close-graphics)
    (send menu2 show #f)
    (programa)
    )
  (define menu2 (new frame% [label "Quick Sort descendente"]))
  (define boton1 (new button% [parent menu2] [label "Rellenar vector"] [callback rellenarVectorQSDescendente]))
  (define boton2 (new button% [parent menu2] [label "Rellenar vector con valores aleatorios"] [callback rellenarVectorAleatoriosQSDescendente]))
  (define boton3 (new button% [parent menu2] [label "Cargar desde fichero"] [callback cargarFicheroQSDescendente]))
  (define boton4 (new button% [parent menu2] [label "Volver al menu"] [callback volverMenu]))
  (send menu2 show #t)
  )


;;SELECCION DESCENDENTE

;; 
;; Nombre: rellenarVectorSDescendente
;; Objetivo: Función para rellenar un vector de tamaño decidido mediante la entrada de usuario, después, le aplica el algoritmo de ordenación por selección descendente.
;; Parámetros:
;;         button: Parámetro de la interfaz gráfica.
;;         event: Parámetro de la interfaz gráfica.
;; Resultado: 
;;         Se aplica la ordenación al vector.
;; Funciones a las que llama: funciones auxiliares, programa y seleccionSortInverso.
;;

(define (rellenarVectorSDescendente button event)
  
  (define menu (new frame% [label "Rellenar vector"]))
  (define tamanyoVector (new text-field% [parent menu] [style (list 'single 'vertical-label)]
                             [label "Numero de elementos"] [init-value (number->string 1)]))

  (define (clickenbotonOK button event) 
    (define nuevoTamanyoVector (string->number (send tamanyoVector get-value)))
    (define aux 0)

    (define (auxRellenarS nuevoTamanyoVector)
      (do
          (
           (i 0 (+ i 1))
           (vector2 (vector) (vector-append vector2 (vector aux)) )
           )
        
        ( (= i nuevoTamanyoVector) vector2  )
        (mensaje "Introduzca la componente del vector")
        (set! aux (read))
        )
      )

    (define v (auxRellenarS nuevoTamanyoVector))
    (mensaje "El vector a ordenar por Seleccion es:")
    (mostrarVector v)
    (seleccionSortInverso v)
      
    (send menu show #f)
    (programa)
    )
  
  (define botonOK (new button% [parent menu] [label "OK"][callback clickenbotonOK] ))
  (send menu show #t)
 
  )


;; 
;; Nombre: rellenarVectorAleatoriosSDescendente
;; Objetivo: Función para rellenar un vector de tamaño decidido mediante valores aleatorios, después, le aplica el algoritmo de ordenación por selección descendente.
;; Parámetros:
;;         button: Parámetro de la interfaz gráfica.
;;         event: Parámetro de la interfaz gráfica.
;; Resultado: 
;;         Se aplica la ordenación al vector.
;; Funciones a las que llama: funciones auxiliares, programa y seleccionSortInverso.
;;

(define (rellenarVectorAleatoriosSDescendente button event)
  
  (define menu (new frame% [label "Rellenar vector"]))
  (define tamanyoVector (new text-field% [parent menu] [style (list 'single 'vertical-label)]
                             [label "Numero de elementos"] [init-value (number->string 1)]))

  (define (clickenbotonOK button event)
    (define nuevoTamanyoVector (string->number (send tamanyoVector get-value)))
    
    (define (aux nuevoTamanyoVector)
      (do
          (
           (i 0 (+ i 1))
           (vector2 (vector) (vector-append vector2 (vector (inexact->exact (round (* 10 (random)))))))
           )
        ( (= i nuevoTamanyoVector) vector2)
        )
      )
    (define v (aux nuevoTamanyoVector))
    (seleccionSortInverso v)
    (send menu show #f)
    (programa)
    )
  
                  
      
  (define botonOK (new button% [parent menu] [label "OK"] [callback clickenbotonOK]))
  (send menu show #t)
  
  )


;; 
;; Nombre: cargarFicheroSDescendente
;; Objetivo: Función para rellenar un vector de tamaño decidido mediante entrada de fichero, después, le aplica el algoritmo de ordenación por selección descendente.
;; Parámetros:
;;         button: Parámetro de la interfaz gráfica.
;;         event: Parámetro de la interfaz gráfica.
;; Resultado: 
;;         Se aplica la ordenación al vector.
;; Funciones a las que llama: funciones auxiliares, programa y seleccionSortInverso.
;;

(define (cargarFicheroSDescendente button event)
  (mensaje "Introduzca el nombre del fichero (use comillas)")
  (define fichero (read))
  (if (not (file-exists? fichero))
      (mensaje "Fallo en la carga del vector")
      )      
  (define puerto (open-input-file fichero))
  (define vector (read puerto))
  (if (vector? vector)
      (seleccionSortInverso vector)
      (mensaje "Fallo en la carga del vector")
      )
  (programa)
  )


;; 
;; Nombre: AuxSeleccionDescendente
;; Objetivo: Función auxiliar para mostrar el menú con las opciones del algoritmo de ordenación por selección descendente.
;; Parámetros:
;;         button: Parámetro de la interfaz gráfica.
;;         event: Parámetro de la interfaz gráfica.
;; Resultado: 
;;         Se aplica la opción elegida
;; Funciones a las que llama: funcion elegida.
;;

(define (AuxSeleccionDescendente button event)
  (define (volverMenu button event)
    (close-graphics)
    (send menu2 show #f)
    (programa)
    )
  (define menu2 (new frame% [label "Seleccion descendiente"]))
  (define boton1 (new button% [parent menu2] [label "Rellenar vector"] [callback rellenarVectorSDescendente]))
  (define boton2 (new button% [parent menu2] [label "Rellenar vector con valores aleatorios"] [callback rellenarVectorAleatoriosSDescendente]))
  (define boton3 (new button% [parent menu2] [label "Cargar desde fichero"] [callback cargarFicheroSDescendente]))
  (define boton4 (new button% [parent menu2] [label "Volver al menu"] [callback volverMenu]))
  (send menu2 show #t)
  )


;;INSERCCION DESCENDENTE

;; 
;; Nombre: rellenarVectorIDescendente
;; Objetivo: Función para rellenar un vector de tamaño decidido mediante la entrada de usuario, después, le aplica el algoritmo de ordenación por insercción descendente.
;; Parámetros:
;;         button: Parámetro de la interfaz gráfica.
;;         event: Parámetro de la interfaz gráfica.
;; Resultado: 
;;         Se aplica la ordenación al vector.
;; Funciones a las que llama: funciones auxiliares, programa y insertionSortInverso.
;;


(define (rellenarVectorIDescendente button event)
  
  (define menu (new frame% [label "Rellenar vector"]))
  (define tamanyoVector (new text-field% [parent menu] [style (list 'single 'vertical-label)]
                             [label "Numero de elementos"] [init-value (number->string 1)]))

  (define (clickenbotonOK button event) 
    (define nuevoTamanyoVector (string->number (send tamanyoVector get-value)))
    (define aux 0)

    (define (auxRellenarI nuevoTamanyoVector)
      (do
          (
           (i 0 (+ i 1))
           (vector2 (vector) (vector-append vector2 (vector aux)) )
           )
        
        ( (= i nuevoTamanyoVector) vector2  )
        (mensaje "Introduzca la componente del vector")
        (set! aux (read))
        )
      )

    (define v (auxRellenarI nuevoTamanyoVector))
    (insertionSortInverso v)
      
    (send menu show #f)
    (programa)
    )
  
  (define botonOK (new button% [parent menu] [label "OK"][callback clickenbotonOK] ))
  (send menu show #t)
 
  )


;; 
;; Nombre: rellenarVectorAleatoriosIDescendente
;; Objetivo: Función para rellenar un vector de tamaño decidido mediante valores aleatorios, después, le aplica el algoritmo de ordenación por insercción descendente.
;; Parámetros:
;;         button: Parámetro de la interfaz gráfica.
;;         event: Parámetro de la interfaz gráfica.
;; Resultado: 
;;         Se aplica la ordenación al vector.
;; Funciones a las que llama: funciones auxiliares, programa y insertionSortInverso.
;;

(define (rellenarVectorAleatoriosIDescendente button event)
  
  (define menu (new frame% [label "Rellenar vector"]))
  (define tamanyoVector (new text-field% [parent menu] [style (list 'single 'vertical-label)]
                             [label "Numero de elementos"] [init-value (number->string 1)]))

  (define (clickenbotonOK button event)
    (define nuevoTamanyoVector (string->number (send tamanyoVector get-value)))
    
    (define (aux nuevoTamanyoVector)
      (do
          (
           (i 0 (+ i 1))
           (vector2 (vector) (vector-append vector2 (vector (inexact->exact (round (* 10 (random)))))))
           )
        ( (= i nuevoTamanyoVector) vector2)
        )
      )
    (define v (aux nuevoTamanyoVector))
    (insertionSortInverso v)
    (send menu show #f)
    (programa)
    )
  
                  
      
  (define botonOK (new button% [parent menu] [label "OK"] [callback clickenbotonOK]))
  (send menu show #t)
  
  )


;; 
;; Nombre: cargarFicheroIDescendente
;; Objetivo: Función para rellenar un vector de tamaño decidido mediante entrada de fichero, después, le aplica el algoritmo de ordenación por insercción descendente.
;; Parámetros:
;;         button: Parámetro de la interfaz gráfica.
;;         event: Parámetro de la interfaz gráfica.
;; Resultado: 
;;         Se aplica la ordenación al vector.
;; Funciones a las que llama: funciones auxiliares, programa y insertionSortInverso.
;;

(define (cargarFicheroIDescendente button event)
  (mensaje "Introduzca el nombre del fichero (use comillas)")
  (define fichero (read))
  (if (not (file-exists? fichero))
      (mensaje "Fallo en la carga del vector")
      )      
  (define puerto (open-input-file fichero))
  (define vector (read puerto))
  (if (vector? vector)
      (insertionSortInverso vector)
      (mensaje "Fallo en la carga del vector")
      )
  (programa)
  )


;; 
;; Nombre: AuxInserccionDescendente
;; Objetivo: Función auxiliar para mostrar el menú con las opciones del algoritmo de ordenación por insercción descendente.
;; Parámetros:
;;         button: Parámetro de la interfaz gráfica.
;;         event: Parámetro de la interfaz gráfica.
;; Resultado: 
;;         Se aplica la opción elegida
;; Funciones a las que llama: funcion elegida.
;;


(define (AuxInserccionDescendente button event)
  (define (volverMenu button event)
    (close-graphics)
    (send menu2 show #f)
    (programa)
    )
  
  (define menu2 (new frame% [label "Inserccion descendente"]))
  (define boton1 (new button% [parent menu2] [label "Rellenar vector"] [callback rellenarVectorIDescendente]))
  (define boton2 (new button% [parent menu2] [label "Rellenar vector con valores aleatorios"] [callback rellenarVectorAleatoriosIDescendente]))
  (define boton3 (new button% [parent menu2] [label "Cargar desde fichero"] [callback cargarFicheroIDescendente]))
  (define boton4 (new button% [parent menu2] [label "Volver al menu"] [callback volverMenu]))
  (send menu2 show #t)
  )



;;MENU PRINCIPAL
;; 
;; Nombre: programa
;; Objetivo: Función que muestra el menú principal.
;; Resultado: 
;;         Operaciones indicadas por el usuario
;; Funciones a las que llama: Todo el demás programa.
;;

(define (programa)
  
  (define (clickenSalir button event)
    ;; Cerrar ventanas de gráficos
    (close-graphics)
    ;; Ocultar ventana de menú
    (send menu show #f)
    )

  
  (define menu (new frame% [label "Menu principal"]))
  (define boton1 (new button% [parent menu] [label "Burbuja ascendente"] [callback AuxBurbujaAscendente]))
  (define boton2 (new button% [parent menu] [label "Merge Sort ascendente"] [callback AuxMergeSortAscendente]))
  (define boton3 (new button% [parent menu] [label "Quick Sort ascendente"] [callback AuxQuickSortAscendente]))
  (define boton4 (new button% [parent menu] [label "Seleccion ascendente"] [callback AuxSeleccionAscendente]))
  (define boton5 (new button% [parent menu] [label "Inserccion ascendente"] [callback AuxInserccionAscendente]))
  (define boton6 (new button% [parent menu] [label "Competicion de algoritmos"] [callback AuxCompeticion]))
  
  (define boton7 (new button% [parent menu] [label "Burbuja descendente"] [callback AuxBurbujaDescendente]))
  (define boton8 (new button% [parent menu] [label "Merge Sort descendente"] [callback AuxMergeSortDescendente]))
  (define boton9 (new button% [parent menu] [label "Quick Sort descendente"] [callback AuxQuickSortDescendente]))
  (define boton10 (new button% [parent menu] [label "Seleccion descendente"] [callback AuxSeleccionDescendente]))
  (define boton11 (new button% [parent menu] [label "Inserccion descendente"] [callback AuxInserccionDescendente]))
  (define boton12 (new button% [parent menu] [label "Salir"] [callback clickenSalir]))
  
  (send menu show #t)


  )

(programa)